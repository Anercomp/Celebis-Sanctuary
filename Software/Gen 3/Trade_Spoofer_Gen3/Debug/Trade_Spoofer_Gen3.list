
Trade_Spoofer_Gen3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001720  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800182c  0800182c  0001182c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800193c  0800193c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800193c  0800193c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800193c  0800193c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800193c  0800193c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001940  08001940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08001950  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08001950  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c854  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001844  00000000  00000000  0002c889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009ad5  00000000  00000000  0002e0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b38  00000000  00000000  000386e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b3d  00000000  00000000  00039220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e894  00000000  00000000  0004fd5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086843  00000000  00000000  0005e5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e4e34  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e24  00000000  00000000  000e4e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001814 	.word	0x08001814

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001814 	.word	0x08001814

0800014c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800014c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000150:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	2400      	movs	r4, #0
 8000154:	9404      	str	r4, [sp, #16]
 8000156:	9405      	str	r4, [sp, #20]
 8000158:	9406      	str	r4, [sp, #24]
 800015a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800015c:	4b39      	ldr	r3, [pc, #228]	; (8000244 <MX_GPIO_Init+0xf8>)
 800015e:	699a      	ldr	r2, [r3, #24]
 8000160:	f042 0210 	orr.w	r2, r2, #16
 8000164:	619a      	str	r2, [r3, #24]
 8000166:	699a      	ldr	r2, [r3, #24]
 8000168:	f002 0210 	and.w	r2, r2, #16
 800016c:	9200      	str	r2, [sp, #0]
 800016e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	699a      	ldr	r2, [r3, #24]
 8000172:	f042 0220 	orr.w	r2, r2, #32
 8000176:	619a      	str	r2, [r3, #24]
 8000178:	699a      	ldr	r2, [r3, #24]
 800017a:	f002 0220 	and.w	r2, r2, #32
 800017e:	9201      	str	r2, [sp, #4]
 8000180:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000182:	699a      	ldr	r2, [r3, #24]
 8000184:	f042 0204 	orr.w	r2, r2, #4
 8000188:	619a      	str	r2, [r3, #24]
 800018a:	699a      	ldr	r2, [r3, #24]
 800018c:	f002 0204 	and.w	r2, r2, #4
 8000190:	9202      	str	r2, [sp, #8]
 8000192:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000194:	699a      	ldr	r2, [r3, #24]
 8000196:	f042 0208 	orr.w	r2, r2, #8
 800019a:	619a      	str	r2, [r3, #24]
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	f003 0308 	and.w	r3, r3, #8
 80001a2:	9303      	str	r3, [sp, #12]
 80001a4:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001a6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8000248 <MX_GPIO_Init+0xfc>
 80001aa:	2201      	movs	r2, #1
 80001ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b0:	4640      	mov	r0, r8
 80001b2:	f000 fddf 	bl	8000d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_Out_GPIO_Port, SD_Out_Pin, GPIO_PIN_RESET);
 80001b6:	f8df a094 	ldr.w	sl, [pc, #148]	; 800024c <MX_GPIO_Init+0x100>
 80001ba:	4622      	mov	r2, r4
 80001bc:	2180      	movs	r1, #128	; 0x80
 80001be:	4650      	mov	r0, sl
 80001c0:	f000 fdd8 	bl	8000d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|SO_Pin, GPIO_PIN_SET);
 80001c4:	4d22      	ldr	r5, [pc, #136]	; (8000250 <MX_GPIO_Init+0x104>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	21c0      	movs	r1, #192	; 0xc0
 80001ca:	4628      	mov	r0, r5
 80001cc:	f000 fdd2 	bl	8000d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d6:	2701      	movs	r7, #1
 80001d8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001da:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001dc:	2602      	movs	r6, #2
 80001de:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001e0:	a904      	add	r1, sp, #16
 80001e2:	4640      	mov	r0, r8
 80001e4:	f000 fcb4 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Out_Pin */
  GPIO_InitStruct.Pin = SD_Out_Pin;
 80001e8:	f04f 0980 	mov.w	r9, #128	; 0x80
 80001ec:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001f0:	f04f 0811 	mov.w	r8, #17
 80001f4:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001f8:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fa:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(SD_Out_GPIO_Port, &GPIO_InitStruct);
 80001fc:	a904      	add	r1, sp, #16
 80001fe:	4650      	mov	r0, sl
 8000200:	f000 fca6 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_In_Pin */
  GPIO_InitStruct.Pin = SD_In_Pin;
 8000204:	2320      	movs	r3, #32
 8000206:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000208:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800020a:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(SD_In_GPIO_Port, &GPIO_InitStruct);
 800020c:	a904      	add	r1, sp, #16
 800020e:	4628      	mov	r0, r5
 8000210:	f000 fc9e 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000214:	2340      	movs	r3, #64	; 0x40
 8000216:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000218:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000220:	a904      	add	r1, sp, #16
 8000222:	4628      	mov	r0, r5
 8000224:	f000 fc94 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SO_Pin */
  GPIO_InitStruct.Pin = SO_Pin;
 8000228:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800022c:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000230:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000232:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(SO_GPIO_Port, &GPIO_InitStruct);
 8000234:	a904      	add	r1, sp, #16
 8000236:	4628      	mov	r0, r5
 8000238:	f000 fc8a 	bl	8000b50 <HAL_GPIO_Init>

}
 800023c:	b008      	add	sp, #32
 800023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	40011000 	.word	0x40011000
 800024c:	40010800 	.word	0x40010800
 8000250:	40010c00 	.word	0x40010c00

08000254 <send16Bit>:
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

void send16Bit(uint16_t v)
{
 8000254:	4684      	mov	ip, r0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <send16Bit+0x68>)
 8000258:	6818      	ldr	r0, [r3, #0]
 800025a:	2300      	movs	r3, #0
 800025c:	6243      	str	r3, [r0, #36]	; 0x24
	GPIOA->BRR = DataOutPin;
 800025e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000262:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000266:	2280      	movs	r2, #128	; 0x80
 8000268:	615a      	str	r2, [r3, #20]
	while(__HAL_TIM_GET_COUNTER(&htim1) < ticksPerBit);
 800026a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800026c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000270:	d9fb      	bls.n	800026a <send16Bit+0x16>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000272:	2100      	movs	r1, #0
 8000274:	6241      	str	r1, [r0, #36]	; 0x24
	for(uint8_t i = 0; i < 16; i++)
 8000276:	e00d      	b.n	8000294 <send16Bit+0x40>
		{
			GPIOA->BSRR = DataOutPin;
		}
		else
		{
			GPIOA->BRR = DataOutPin;
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <send16Bit+0x6c>)
 800027a:	2280      	movs	r2, #128	; 0x80
 800027c:	615a      	str	r2, [r3, #20]
		}
		v >>= 1;
 800027e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
		while(__HAL_TIM_GET_COUNTER(&htim1) < ticksPerBit*(i+1));
 8000282:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000284:	f240 2371 	movw	r3, #625	; 0x271
 8000288:	fb01 3303 	mla	r3, r1, r3, r3
 800028c:	429a      	cmp	r2, r3
 800028e:	d3f8      	bcc.n	8000282 <send16Bit+0x2e>
	for(uint8_t i = 0; i < 16; i++)
 8000290:	3101      	adds	r1, #1
 8000292:	b2c9      	uxtb	r1, r1
 8000294:	290f      	cmp	r1, #15
 8000296:	d806      	bhi.n	80002a6 <send16Bit+0x52>
		if(1 & v)
 8000298:	f01c 0f01 	tst.w	ip, #1
 800029c:	d0ec      	beq.n	8000278 <send16Bit+0x24>
			GPIOA->BSRR = DataOutPin;
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <send16Bit+0x6c>)
 80002a0:	2280      	movs	r2, #128	; 0x80
 80002a2:	611a      	str	r2, [r3, #16]
 80002a4:	e7eb      	b.n	800027e <send16Bit+0x2a>
	}
	GPIOA->BSRR = DataOutPin;
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <send16Bit+0x6c>)
 80002a8:	2280      	movs	r2, #128	; 0x80
 80002aa:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80002ac:	2300      	movs	r3, #0
 80002ae:	6243      	str	r3, [r0, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < 4000);
 80002b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80002b2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80002b6:	d3fb      	bcc.n	80002b0 <send16Bit+0x5c>
}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	2000002c 	.word	0x2000002c
 80002c0:	40010800 	.word	0x40010800

080002c4 <receive16Bit>:

uint16_t receive16Bit()
{
 80002c4:	b410      	push	{r4}
	uint16_t inBytes = 0xFFFF;
	//while(inBytes == 0xFFFF)
	//{
		while(GPIOB->IDR & DataInPin);
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <receive16Bit+0x64>)
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	f013 0f20 	tst.w	r3, #32
 80002ce:	d1fa      	bne.n	80002c6 <receive16Bit+0x2>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <receive16Bit+0x68>)
 80002d2:	681c      	ldr	r4, [r3, #0]
 80002d4:	2300      	movs	r3, #0
 80002d6:	6263      	str	r3, [r4, #36]	; 0x24
		while(__HAL_TIM_GET_COUNTER(&htim1) < 939);
 80002d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80002da:	f240 33aa 	movw	r3, #938	; 0x3aa
 80002de:	429a      	cmp	r2, r3
 80002e0:	d9fa      	bls.n	80002d8 <receive16Bit+0x14>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80002e2:	2100      	movs	r1, #0
 80002e4:	6261      	str	r1, [r4, #36]	; 0x24
	uint16_t inBytes = 0xFFFF;
 80002e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
		for(uint8_t i = 0;i < 16; i++)
 80002ea:	e008      	b.n	80002fe <receive16Bit+0x3a>
			inBytes >>= 1;
			if(GPIOB->IDR & DataInPin)
			{
				inBytes = inBytes | 0x8000;
			}
			while(__HAL_TIM_GET_COUNTER(&htim1) < ticksPerBit*(i+1));
 80002ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80002ee:	f240 2371 	movw	r3, #625	; 0x271
 80002f2:	fb01 3303 	mla	r3, r1, r3, r3
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d3f8      	bcc.n	80002ec <receive16Bit+0x28>
		for(uint8_t i = 0;i < 16; i++)
 80002fa:	3101      	adds	r1, #1
 80002fc:	b2c9      	uxtb	r1, r1
 80002fe:	290f      	cmp	r1, #15
 8000300:	d80f      	bhi.n	8000322 <receive16Bit+0x5e>
			GPIOB->ODR ^= GPIO_PIN_5;
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <receive16Bit+0x64>)
 8000304:	68da      	ldr	r2, [r3, #12]
 8000306:	f082 0220 	eor.w	r2, r2, #32
 800030a:	60da      	str	r2, [r3, #12]
			inBytes >>= 1;
 800030c:	0840      	lsrs	r0, r0, #1
			if(GPIOB->IDR & DataInPin)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	f013 0f20 	tst.w	r3, #32
 8000314:	d0ea      	beq.n	80002ec <receive16Bit+0x28>
				inBytes = inBytes | 0x8000;
 8000316:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800031a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800031e:	b280      	uxth	r0, r0
 8000320:	e7e4      	b.n	80002ec <receive16Bit+0x28>
		}
	//}
	return inBytes;
}
 8000322:	bc10      	pop	{r4}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40010c00 	.word	0x40010c00
 800032c:	2000002c 	.word	0x2000002c

08000330 <initLink>:

void initLink()
{
 8000330:	b508      	push	{r3, lr}
	while(flags != 1)
 8000332:	e003      	b.n	800033c <initLink+0xc>
	{
		switch(receive16Bit())
		{
			case SLAVE_HANDSHAKE: send16Bit(SLAVE_HANDSHAKE); break;
 8000334:	f64b 10a0 	movw	r0, #47520	; 0xb9a0
 8000338:	f7ff ff8c 	bl	8000254 <send16Bit>
	while(flags != 1)
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <initLink+0x48>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d017      	beq.n	8000374 <initLink+0x44>
		switch(receive16Bit())
 8000344:	f7ff ffbe 	bl	80002c4 <receive16Bit>
 8000348:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800034c:	4298      	cmp	r0, r3
 800034e:	d009      	beq.n	8000364 <initLink+0x34>
 8000350:	f64b 13a0 	movw	r3, #47520	; 0xb9a0
 8000354:	4298      	cmp	r0, r3
 8000356:	d0ed      	beq.n	8000334 <initLink+0x4>
 8000358:	2800      	cmp	r0, #0
 800035a:	d1ef      	bne.n	800033c <initLink+0xc>
			case MASTER_HANDSHAKE: send16Bit(SLAVE_HANDSHAKE); flags = 1; break;
			case 0x0000: send16Bit(0x0000); break;
 800035c:	2000      	movs	r0, #0
 800035e:	f7ff ff79 	bl	8000254 <send16Bit>
 8000362:	e7eb      	b.n	800033c <initLink+0xc>
			case MASTER_HANDSHAKE: send16Bit(SLAVE_HANDSHAKE); flags = 1; break;
 8000364:	f64b 10a0 	movw	r0, #47520	; 0xb9a0
 8000368:	f7ff ff74 	bl	8000254 <send16Bit>
 800036c:	4b02      	ldr	r3, [pc, #8]	; (8000378 <initLink+0x48>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	e7e3      	b.n	800033c <initLink+0xc>
		}
	}
}
 8000374:	bd08      	pop	{r3, pc}
 8000376:	bf00      	nop
 8000378:	20000028 	.word	0x20000028

0800037c <sendBlock>:
		copyBlock();
	}
}

void sendBlock(uint16_t* blockdata)
{
 800037c:	b538      	push	{r3, r4, r5, lr}
 800037e:	4605      	mov	r5, r0
	for(uint8_t i = 0; i != 9; i++)
 8000380:	2400      	movs	r4, #0
 8000382:	e007      	b.n	8000394 <sendBlock+0x18>
	{
		receive16Bit();
 8000384:	f7ff ff9e 	bl	80002c4 <receive16Bit>
		send16Bit(blockdata[i]);
 8000388:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 800038c:	f7ff ff62 	bl	8000254 <send16Bit>
	for(uint8_t i = 0; i != 9; i++)
 8000390:	3401      	adds	r4, #1
 8000392:	b2e4      	uxtb	r4, r4
 8000394:	2c09      	cmp	r4, #9
 8000396:	d1f5      	bne.n	8000384 <sendBlock+0x8>
	}
}
 8000398:	bd38      	pop	{r3, r4, r5, pc}

0800039a <sendZeroBlock>:
		  copyBlock();
	  }
}

void sendZeroBlock()
{
 800039a:	b510      	push	{r4, lr}
	uint16_t temp = receive16Bit();
 800039c:	f7ff ff92 	bl	80002c4 <receive16Bit>
	send16Bit(temp);
 80003a0:	f7ff ff58 	bl	8000254 <send16Bit>
	temp = receive16Bit();
 80003a4:	f7ff ff8e 	bl	80002c4 <receive16Bit>
	send16Bit(temp);
 80003a8:	f7ff ff54 	bl	8000254 <send16Bit>
	for(uint8_t i = 0; i != 7; i++)
 80003ac:	2400      	movs	r4, #0
 80003ae:	e006      	b.n	80003be <sendZeroBlock+0x24>
	{
		receive16Bit();
 80003b0:	f7ff ff88 	bl	80002c4 <receive16Bit>
		send16Bit(0x0000);
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ff4d 	bl	8000254 <send16Bit>
	for(uint8_t i = 0; i != 7; i++)
 80003ba:	3401      	adds	r4, #1
 80003bc:	b2e4      	uxtb	r4, r4
 80003be:	2c07      	cmp	r4, #7
 80003c0:	d1f6      	bne.n	80003b0 <sendZeroBlock+0x16>
	}
}
 80003c2:	bd10      	pop	{r4, pc}

080003c4 <sendZero>:

void sendZero()
{
 80003c4:	b510      	push	{r4, lr}
		for(uint8_t i = 0; i != 9; i++)
 80003c6:	2400      	movs	r4, #0
 80003c8:	e006      	b.n	80003d8 <sendZero+0x14>
		{
			receive16Bit();
 80003ca:	f7ff ff7b 	bl	80002c4 <receive16Bit>
			send16Bit(0x0000);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f7ff ff40 	bl	8000254 <send16Bit>
		for(uint8_t i = 0; i != 9; i++)
 80003d4:	3401      	adds	r4, #1
 80003d6:	b2e4      	uxtb	r4, r4
 80003d8:	2c09      	cmp	r4, #9
 80003da:	d1f6      	bne.n	80003ca <sendZero+0x6>
		}
}
 80003dc:	bd10      	pop	{r4, pc}

080003de <sendContBlock>:

void sendContBlock(uint16_t* blockdata)
{
 80003de:	b538      	push	{r3, r4, r5, lr}
 80003e0:	4605      	mov	r5, r0
	uint16_t temp = receive16Bit();
 80003e2:	f7ff ff6f 	bl	80002c4 <receive16Bit>
	send16Bit(temp);
 80003e6:	f7ff ff35 	bl	8000254 <send16Bit>
	temp = receive16Bit();
 80003ea:	f7ff ff6b 	bl	80002c4 <receive16Bit>
	send16Bit(temp);
 80003ee:	f7ff ff31 	bl	8000254 <send16Bit>
	for(uint8_t i = 0; i != 7; i++)
 80003f2:	2400      	movs	r4, #0
 80003f4:	e007      	b.n	8000406 <sendContBlock+0x28>
	{
		receive16Bit();
 80003f6:	f7ff ff65 	bl	80002c4 <receive16Bit>
		send16Bit(blockdata[i]);
 80003fa:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 80003fe:	f7ff ff29 	bl	8000254 <send16Bit>
	for(uint8_t i = 0; i != 7; i++)
 8000402:	3401      	adds	r4, #1
 8000404:	b2e4      	uxtb	r4, r4
 8000406:	2c07      	cmp	r4, #7
 8000408:	d1f5      	bne.n	80003f6 <sendContBlock+0x18>
	}
}
 800040a:	bd38      	pop	{r3, r4, r5, pc}

0800040c <copyBlock>:

void copyBlock()
{
 800040c:	b510      	push	{r4, lr}
	uint16_t temp = 0;
	for(uint8_t i = 0; i < 9; i++)
 800040e:	2400      	movs	r4, #0
 8000410:	e005      	b.n	800041e <copyBlock+0x12>
	{
		temp = receive16Bit();
 8000412:	f7ff ff57 	bl	80002c4 <receive16Bit>
		send16Bit(temp);
 8000416:	f7ff ff1d 	bl	8000254 <send16Bit>
	for(uint8_t i = 0; i < 9; i++)
 800041a:	3401      	adds	r4, #1
 800041c:	b2e4      	uxtb	r4, r4
 800041e:	2c08      	cmp	r4, #8
 8000420:	d9f7      	bls.n	8000412 <copyBlock+0x6>
	}
}
 8000422:	bd10      	pop	{r4, pc}

08000424 <waitForUnionRoom>:
{
 8000424:	b510      	push	{r4, lr}
	while(!escapeFlag)
 8000426:	e002      	b.n	800042e <waitForUnionRoom+0xa>
			case 0x0000	:	send16Bit(0x0000); break;
 8000428:	2000      	movs	r0, #0
 800042a:	f7ff ff13 	bl	8000254 <send16Bit>
		switch (receive16Bit()) {
 800042e:	f7ff ff49 	bl	80002c4 <receive16Bit>
 8000432:	2800      	cmp	r0, #0
 8000434:	d0f8      	beq.n	8000428 <waitForUnionRoom+0x4>
 8000436:	f642 73fe 	movw	r3, #12286	; 0x2ffe
 800043a:	4298      	cmp	r0, r3
 800043c:	d1f7      	bne.n	800042e <waitForUnionRoom+0xa>
			case 0x2FFE :	send16Bit(0x2FFE); escapeFlag = 1; break;
 800043e:	f642 70fe 	movw	r0, #12286	; 0x2ffe
 8000442:	f7ff ff07 	bl	8000254 <send16Bit>
 8000446:	2400      	movs	r4, #0
 8000448:	e006      	b.n	8000458 <waitForUnionRoom+0x34>
		receive16Bit();
 800044a:	f7ff ff3b 	bl	80002c4 <receive16Bit>
		send16Bit(0x0000);
 800044e:	2000      	movs	r0, #0
 8000450:	f7ff ff00 	bl	8000254 <send16Bit>
	for(uint8_t i = 0; i < 7; i++)
 8000454:	3401      	adds	r4, #1
 8000456:	b2e4      	uxtb	r4, r4
 8000458:	2c06      	cmp	r4, #6
 800045a:	d9f6      	bls.n	800044a <waitForUnionRoom+0x26>
	for(uint8_t i = 0; i < 30; i++)
 800045c:	2400      	movs	r4, #0
 800045e:	e003      	b.n	8000468 <waitForUnionRoom+0x44>
		copyBlock();
 8000460:	f7ff ffd4 	bl	800040c <copyBlock>
	for(uint8_t i = 0; i < 30; i++)
 8000464:	3401      	adds	r4, #1
 8000466:	b2e4      	uxtb	r4, r4
 8000468:	2c1d      	cmp	r4, #29
 800046a:	d9f9      	bls.n	8000460 <waitForUnionRoom+0x3c>
}
 800046c:	bd10      	pop	{r4, pc}

0800046e <sendMoveBlock>:
	sendMoveBlock(RIGHT);
	sendMoveBlock(UP);
}

void sendMoveBlock(uint16_t dir)
{
 800046e:	b538      	push	{r3, r4, r5, lr}
	switch (dir) {
 8000470:	f1a0 0311 	sub.w	r3, r0, #17
 8000474:	2b04      	cmp	r3, #4
 8000476:	d802      	bhi.n	800047e <sendMoveBlock+0x10>
 8000478:	4605      	mov	r5, r0
		case LEFT	:	break;
		case RIGHT	:	break;
		default		:	copyBlock(); return;
	}
	uint16_t temp = 0;
	for(uint8_t i = 0; i < 10; i++)
 800047a:	2400      	movs	r4, #0
 800047c:	e031      	b.n	80004e2 <sendMoveBlock+0x74>
		default		:	copyBlock(); return;
 800047e:	f7ff ffc5 	bl	800040c <copyBlock>
 8000482:	e063      	b.n	800054c <sendMoveBlock+0xde>
	{
		temp = receive16Bit();
 8000484:	f7ff ff1e 	bl	80002c4 <receive16Bit>
		send16Bit(temp);
 8000488:	f7ff fee4 	bl	8000254 <send16Bit>
		receive16Bit();
 800048c:	f7ff ff1a 	bl	80002c4 <receive16Bit>
		send16Bit(0xCAFE);
 8000490:	f64c 20fe 	movw	r0, #51966	; 0xcafe
 8000494:	f7ff fede 	bl	8000254 <send16Bit>
		receive16Bit();
 8000498:	f7ff ff14 	bl	80002c4 <receive16Bit>
		send16Bit(dir);
 800049c:	4628      	mov	r0, r5
 800049e:	f7ff fed9 	bl	8000254 <send16Bit>
		receive16Bit();
 80004a2:	f7ff ff0f 	bl	80002c4 <receive16Bit>
		send16Bit(0x0000);
 80004a6:	2000      	movs	r0, #0
 80004a8:	f7ff fed4 	bl	8000254 <send16Bit>
		receive16Bit();
 80004ac:	f7ff ff0a 	bl	80002c4 <receive16Bit>
		send16Bit(0x0000);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fecf 	bl	8000254 <send16Bit>
		receive16Bit();
 80004b6:	f7ff ff05 	bl	80002c4 <receive16Bit>
		send16Bit(0x0000);
 80004ba:	2000      	movs	r0, #0
 80004bc:	f7ff feca 	bl	8000254 <send16Bit>
		receive16Bit();
 80004c0:	f7ff ff00 	bl	80002c4 <receive16Bit>
		send16Bit(0x0000);
 80004c4:	2000      	movs	r0, #0
 80004c6:	f7ff fec5 	bl	8000254 <send16Bit>
		receive16Bit();
 80004ca:	f7ff fefb 	bl	80002c4 <receive16Bit>
		send16Bit(0x0000);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff fec0 	bl	8000254 <send16Bit>
		receive16Bit();
 80004d4:	f7ff fef6 	bl	80002c4 <receive16Bit>
		send16Bit(0x0000);
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff febb 	bl	8000254 <send16Bit>
	for(uint8_t i = 0; i < 10; i++)
 80004de:	3401      	adds	r4, #1
 80004e0:	b2e4      	uxtb	r4, r4
 80004e2:	2c09      	cmp	r4, #9
 80004e4:	d9ce      	bls.n	8000484 <sendMoveBlock+0x16>
	}
	for(uint8_t i = 0; i < 4; i++)
 80004e6:	2400      	movs	r4, #0
 80004e8:	e02e      	b.n	8000548 <sendMoveBlock+0xda>
	{
	temp = receive16Bit();
 80004ea:	f7ff feeb 	bl	80002c4 <receive16Bit>
	send16Bit(temp);
 80004ee:	f7ff feb1 	bl	8000254 <send16Bit>
	receive16Bit();
 80004f2:	f7ff fee7 	bl	80002c4 <receive16Bit>
	send16Bit(0xCAFE);
 80004f6:	f64c 20fe 	movw	r0, #51966	; 0xcafe
 80004fa:	f7ff feab 	bl	8000254 <send16Bit>
	receive16Bit();
 80004fe:	f7ff fee1 	bl	80002c4 <receive16Bit>
	send16Bit(0x0011);
 8000502:	2011      	movs	r0, #17
 8000504:	f7ff fea6 	bl	8000254 <send16Bit>
	receive16Bit();
 8000508:	f7ff fedc 	bl	80002c4 <receive16Bit>
	send16Bit(0x0000);
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff fea1 	bl	8000254 <send16Bit>
	receive16Bit();
 8000512:	f7ff fed7 	bl	80002c4 <receive16Bit>
	send16Bit(0x0000);
 8000516:	2000      	movs	r0, #0
 8000518:	f7ff fe9c 	bl	8000254 <send16Bit>
	receive16Bit();
 800051c:	f7ff fed2 	bl	80002c4 <receive16Bit>
	send16Bit(0x0000);
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff fe97 	bl	8000254 <send16Bit>
	receive16Bit();
 8000526:	f7ff fecd 	bl	80002c4 <receive16Bit>
	send16Bit(0x0000);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff fe92 	bl	8000254 <send16Bit>
	receive16Bit();
 8000530:	f7ff fec8 	bl	80002c4 <receive16Bit>
	send16Bit(0x0000);
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fe8d 	bl	8000254 <send16Bit>
	receive16Bit();
 800053a:	f7ff fec3 	bl	80002c4 <receive16Bit>
	send16Bit(0x0000);
 800053e:	2000      	movs	r0, #0
 8000540:	f7ff fe88 	bl	8000254 <send16Bit>
	for(uint8_t i = 0; i < 4; i++)
 8000544:	3401      	adds	r4, #1
 8000546:	b2e4      	uxtb	r4, r4
 8000548:	2c03      	cmp	r4, #3
 800054a:	d9ce      	bls.n	80004ea <sendMoveBlock+0x7c>
	}
}
 800054c:	bd38      	pop	{r3, r4, r5, pc}

0800054e <handleUnionRoomMovement>:
{
 800054e:	b508      	push	{r3, lr}
	sendMoveBlock(UP);
 8000550:	2013      	movs	r0, #19
 8000552:	f7ff ff8c 	bl	800046e <sendMoveBlock>
	sendMoveBlock(UP);
 8000556:	2013      	movs	r0, #19
 8000558:	f7ff ff89 	bl	800046e <sendMoveBlock>
	sendMoveBlock(RIGHT);
 800055c:	2015      	movs	r0, #21
 800055e:	f7ff ff86 	bl	800046e <sendMoveBlock>
	sendMoveBlock(UP);
 8000562:	2013      	movs	r0, #19
 8000564:	f7ff ff83 	bl	800046e <sendMoveBlock>
}
 8000568:	bd08      	pop	{r3, pc}

0800056a <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800056c:	e7fe      	b.n	800056c <Error_Handler+0x2>
	...

08000570 <MX_TIM1_Init>:
{
 8000570:	b500      	push	{lr}
 8000572:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000574:	2300      	movs	r3, #0
 8000576:	9302      	str	r3, [sp, #8]
 8000578:	9303      	str	r3, [sp, #12]
 800057a:	9304      	str	r3, [sp, #16]
 800057c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	9301      	str	r3, [sp, #4]
  htim1.Instance = TIM1;
 8000582:	4813      	ldr	r0, [pc, #76]	; (80005d0 <MX_TIM1_Init+0x60>)
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <MX_TIM1_Init+0x64>)
 8000586:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000588:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058a:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 800058c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000590:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000592:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000594:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000596:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000598:	f000 ffba 	bl	8001510 <HAL_TIM_Base_Init>
 800059c:	b990      	cbnz	r0, 80005c4 <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005a4:	a902      	add	r1, sp, #8
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <MX_TIM1_Init+0x60>)
 80005a8:	f000 ffea 	bl	8001580 <HAL_TIM_ConfigClockSource>
 80005ac:	b960      	cbnz	r0, 80005c8 <MX_TIM1_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005b4:	4669      	mov	r1, sp
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <MX_TIM1_Init+0x60>)
 80005b8:	f001 f850 	bl	800165c <HAL_TIMEx_MasterConfigSynchronization>
 80005bc:	b930      	cbnz	r0, 80005cc <MX_TIM1_Init+0x5c>
}
 80005be:	b007      	add	sp, #28
 80005c0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80005c4:	f7ff ffd1 	bl	800056a <Error_Handler>
    Error_Handler();
 80005c8:	f7ff ffcf 	bl	800056a <Error_Handler>
    Error_Handler();
 80005cc:	f7ff ffcd 	bl	800056a <Error_Handler>
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	40012c00 	.word	0x40012c00

080005d8 <MX_USART1_UART_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80005da:	480a      	ldr	r0, [pc, #40]	; (8000604 <MX_USART1_UART_Init+0x2c>)
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_USART1_UART_Init+0x30>)
 80005de:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80005e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005e4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	2300      	movs	r3, #0
 80005e8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005ea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ec:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005ee:	220c      	movs	r2, #12
 80005f0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f6:	f001 f8b1 	bl	800175c <HAL_UART_Init>
 80005fa:	b900      	cbnz	r0, 80005fe <MX_USART1_UART_Init+0x26>
}
 80005fc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005fe:	f7ff ffb4 	bl	800056a <Error_Handler>
 8000602:	bf00      	nop
 8000604:	20000074 	.word	0x20000074
 8000608:	40013800 	.word	0x40013800

0800060c <SystemClock_Config>:
{
 800060c:	b500      	push	{lr}
 800060e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000610:	2228      	movs	r2, #40	; 0x28
 8000612:	2100      	movs	r1, #0
 8000614:	a806      	add	r0, sp, #24
 8000616:	f001 f8f5 	bl	8001804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061a:	2300      	movs	r3, #0
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	9302      	str	r3, [sp, #8]
 8000620:	9303      	str	r3, [sp, #12]
 8000622:	9304      	str	r3, [sp, #16]
 8000624:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000626:	2201      	movs	r2, #1
 8000628:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2202      	movs	r2, #2
 8000634:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000638:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800063c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	a806      	add	r0, sp, #24
 8000640:	f000 fbb4 	bl	8000dac <HAL_RCC_OscConfig>
 8000644:	b980      	cbnz	r0, 8000668 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2102      	movs	r1, #2
 800064c:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000656:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065a:	a801      	add	r0, sp, #4
 800065c:	f000 fde6 	bl	800122c <HAL_RCC_ClockConfig>
 8000660:	b920      	cbnz	r0, 800066c <SystemClock_Config+0x60>
}
 8000662:	b011      	add	sp, #68	; 0x44
 8000664:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000668:	f7ff ff7f 	bl	800056a <Error_Handler>
    Error_Handler();
 800066c:	f7ff ff7d 	bl	800056a <Error_Handler>

08000670 <main>:
{
 8000670:	b500      	push	{lr}
 8000672:	b0bf      	sub	sp, #252	; 0xfc
  HAL_Init();
 8000674:	f000 f9d6 	bl	8000a24 <HAL_Init>
  SystemClock_Config();
 8000678:	f7ff ffc8 	bl	800060c <SystemClock_Config>
  MX_GPIO_Init();
 800067c:	f7ff fd66 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000680:	f7ff ff76 	bl	8000570 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000684:	f7ff ffa8 	bl	80005d8 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start(&htim1);
 8000688:	487b      	ldr	r0, [pc, #492]	; (8000878 <main+0x208>)
 800068a:	f000 fed9 	bl	8001440 <HAL_TIM_Base_Start>
	  GPIOC->BSRR = GPIO_PIN_13;
 800068e:	4d7b      	ldr	r5, [pc, #492]	; (800087c <main+0x20c>)
 8000690:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8000694:	612e      	str	r6, [r5, #16]
	  GPIOB->BRR = GPIO_PIN_6;
 8000696:	4b7a      	ldr	r3, [pc, #488]	; (8000880 <main+0x210>)
 8000698:	2240      	movs	r2, #64	; 0x40
 800069a:	615a      	str	r2, [r3, #20]
	  HAL_Delay(1000);
 800069c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a0:	f000 f9e4 	bl	8000a6c <HAL_Delay>
	  initLink();
 80006a4:	f7ff fe44 	bl	8000330 <initLink>
	  sendZeroBlock();
 80006a8:	f7ff fe77 	bl	800039a <sendZeroBlock>
	  uint16_t tempBlockData1[] = {0x0000,0x2222,0x1133,0x0000,0x0000,0x0000,0x0000};
 80006ac:	4c75      	ldr	r4, [pc, #468]	; (8000884 <main+0x214>)
 80006ae:	f10d 0c04 	add.w	ip, sp, #4
 80006b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006b6:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80006ba:	f8ac 3000 	strh.w	r3, [ip]
	  sendBlock(tempBlockData1);
 80006be:	a801      	add	r0, sp, #4
 80006c0:	f7ff fe5c 	bl	800037c <sendBlock>
	  sendZeroBlock();
 80006c4:	f7ff fe69 	bl	800039a <sendZeroBlock>
	  sendZeroBlock();
 80006c8:	f7ff fe67 	bl	800039a <sendZeroBlock>
	  uint16_t tempBlockData2[] = {0x0000,0xBBBB,0x003C,0x0081,0x0000,0x0000,0x0000,0x0000,0x0000};
 80006cc:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 80006d0:	f104 0e10 	add.w	lr, r4, #16
 80006d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80006d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006dc:	f8de 3000 	ldr.w	r3, [lr]
 80006e0:	f8ac 3000 	strh.w	r3, [ip]
	  sendBlock(tempBlockData2);
 80006e4:	a839      	add	r0, sp, #228	; 0xe4
 80006e6:	f7ff fe49 	bl	800037c <sendBlock>
	  sendZeroBlock();
 80006ea:	f7ff fe56 	bl	800039a <sendZeroBlock>
	  sendZeroBlock();
 80006ee:	f7ff fe54 	bl	800039a <sendZeroBlock>
	  uint16_t tempBlockData3[] = {0x6147,0x656D,0x7246,0x6165,0x206B,0x6E69,0x2E63};
 80006f2:	f10d 0c14 	add.w	ip, sp, #20
 80006f6:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80006fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006fc:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000700:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData3);
 8000704:	a805      	add	r0, sp, #20
 8000706:	f7ff fe6a 	bl	80003de <sendContBlock>
	  uint16_t tempBlockData4[] = {0x0000,0x4004,0x8000,0xDD12,0xA92C,0xC6C0,0xCCC9};
 800070a:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 800070e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8000712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000714:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000718:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData4);
 800071c:	a809      	add	r0, sp, #36	; 0x24
 800071e:	f7ff fe5e 	bl	80003de <sendContBlock>
	  uint16_t tempBlockData5[] = {0xBBC3,0xFFC8,0x0011,0x0000,0x1133,0x0000,0x0000};
 8000722:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 8000726:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800072a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800072c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000730:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData5);
 8000734:	a80d      	add	r0, sp, #52	; 0x34
 8000736:	f7ff fe52 	bl	80003de <sendContBlock>
	  uint16_t tempBlockData6[] = {0x0005,0x6147,0x656D,0x7246,0x6165,0x206B,0x6E69};
 800073a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800073e:	f104 0354 	add.w	r3, r4, #84	; 0x54
 8000742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000744:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000748:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData6);
 800074c:	a811      	add	r0, sp, #68	; 0x44
 800074e:	f7ff fe46 	bl	80003de <sendContBlock>
	  uint16_t tempBlockData7[] = {0x2E63,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000};
 8000752:	f642 6363 	movw	r3, #11875	; 0x2e63
 8000756:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 800075a:	2300      	movs	r3, #0
 800075c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 8000760:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8000764:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 8000768:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 800076c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 8000770:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
	  sendContBlock(tempBlockData7);
 8000774:	a815      	add	r0, sp, #84	; 0x54
 8000776:	f7ff fe32 	bl	80003de <sendContBlock>
	  sendZeroBlock();
 800077a:	f7ff fe0e 	bl	800039a <sendZeroBlock>
	  sendZeroBlock();
 800077e:	f7ff fe0c 	bl	800039a <sendZeroBlock>
	  sendZeroBlock();
 8000782:	f7ff fe0a 	bl	800039a <sendZeroBlock>
	  sendZero();
 8000786:	f7ff fe1d 	bl	80003c4 <sendZero>
	  sendZeroBlock();
 800078a:	f7ff fe06 	bl	800039a <sendZeroBlock>
	  sendZeroBlock();
 800078e:	f7ff fe04 	bl	800039a <sendZeroBlock>
	  uint16_t tempBlockData8[] = {0x0064,0x0081,0x0000,0x0000,0x0000,0x0000,0x0000};
 8000792:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8000796:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800079a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800079c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80007a0:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData8);
 80007a4:	a819      	add	r0, sp, #100	; 0x64
 80007a6:	f7ff fe1a 	bl	80003de <sendContBlock>
	  sendZeroBlock();
 80007aa:	f7ff fdf6 	bl	800039a <sendZeroBlock>
	  sendZeroBlock();
 80007ae:	f7ff fdf4 	bl	800039a <sendZeroBlock>
	  uint16_t tempBlockData9[] = {0x0200,0x0101,0x7200,0x0081,0x0011,0x0036,0x016F};
 80007b2:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
 80007b6:	f104 0374 	add.w	r3, r4, #116	; 0x74
 80007ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007bc:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80007c0:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData9);
 80007c4:	a81d      	add	r0, sp, #116	; 0x74
 80007c6:	f7ff fe0a 	bl	80003de <sendContBlock>
	  uint16_t tempBlockData10[] = {0xDD12,0x03E7,0x003B,0x0004,0x000B,0x0000,0x0000};
 80007ca:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 80007ce:	f104 0384 	add.w	r3, r4, #132	; 0x84
 80007d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d4:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80007d8:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData10);
 80007dc:	a821      	add	r0, sp, #132	; 0x84
 80007de:	f7ff fdfe 	bl	80003de <sendContBlock>
	  uint16_t tempBlockData11[] = {0x0000,0x0000,0x0154,0x0000,0x0714,0x0001,0x0A01};
 80007e2:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 80007e6:	f104 0394 	add.w	r3, r4, #148	; 0x94
 80007ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ec:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80007f0:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData11);
 80007f4:	a825      	add	r0, sp, #148	; 0x94
 80007f6:	f7ff fdf2 	bl	80003de <sendContBlock>
	  uint16_t tempBlockData12[] = {0x0829,0x2A96,0x0075,0xC6C0,0xCCC9,0xBBC3,0xFFC8};
 80007fa:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
 80007fe:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8000802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000804:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000808:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData12);
 800080c:	a829      	add	r0, sp, #164	; 0xa4
 800080e:	f7ff fde6 	bl	80003de <sendContBlock>
	  uint16_t tempBlockData13[] = {0x2E04,0x0000,0x000B,0x0000,0x0003,0x0000,0x000D};
 8000812:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
 8000816:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 800081a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800081c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000820:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData13);
 8000824:	a82d      	add	r0, sp, #180	; 0xb4
 8000826:	f7ff fdda 	bl	80003de <sendContBlock>
	  uint16_t tempBlockData14[] = {0x0000,0x0000,0x0000,0x0001,0x5C00,0x0101,0x0001};
 800082a:	f10d 0cc4 	add.w	ip, sp, #196	; 0xc4
 800082e:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
 8000832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000834:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000838:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData14);
 800083c:	a831      	add	r0, sp, #196	; 0xc4
 800083e:	f7ff fdce 	bl	80003de <sendContBlock>
	  uint16_t tempBlockData15[] = {0x0097,0x0096,0x019A,0x00F3,0x00F5,0x00FB,0x0000};
 8000842:	f10d 0cd4 	add.w	ip, sp, #212	; 0xd4
 8000846:	34d4      	adds	r4, #212	; 0xd4
 8000848:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800084c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000850:	f8ac 3000 	strh.w	r3, [ip]
	  sendContBlock(tempBlockData15);
 8000854:	a835      	add	r0, sp, #212	; 0xd4
 8000856:	f7ff fdc2 	bl	80003de <sendContBlock>
	  sendZeroBlock();
 800085a:	f7ff fd9e 	bl	800039a <sendZeroBlock>
	  sendZeroBlock();
 800085e:	f7ff fd9c 	bl	800039a <sendZeroBlock>
	  sendZeroBlock();
 8000862:	f7ff fd9a 	bl	800039a <sendZeroBlock>
	  waitForUnionRoom();
 8000866:	f7ff fddd 	bl	8000424 <waitForUnionRoom>
	  handleUnionRoomMovement();
 800086a:	f7ff fe70 	bl	800054e <handleUnionRoomMovement>
	  LED_ON
 800086e:	616e      	str	r6, [r5, #20]
		  copyBlock();
 8000870:	f7ff fdcc 	bl	800040c <copyBlock>
	  while(1)
 8000874:	e7fc      	b.n	8000870 <main+0x200>
 8000876:	bf00      	nop
 8000878:	2000002c 	.word	0x2000002c
 800087c:	40011000 	.word	0x40011000
 8000880:	40010c00 	.word	0x40010c00
 8000884:	0800182c 	.word	0x0800182c

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_MspInit+0x3c>)
 800088c:	699a      	ldr	r2, [r3, #24]
 800088e:	f042 0201 	orr.w	r2, r2, #1
 8000892:	619a      	str	r2, [r3, #24]
 8000894:	699a      	ldr	r2, [r3, #24]
 8000896:	f002 0201 	and.w	r2, r2, #1
 800089a:	9200      	str	r2, [sp, #0]
 800089c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	69da      	ldr	r2, [r3, #28]
 80008a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008a4:	61da      	str	r2, [r3, #28]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008b0:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <HAL_MspInit+0x40>)
 80008b2:	6853      	ldr	r3, [r2, #4]
 80008b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	b002      	add	sp, #8
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010000 	.word	0x40010000

080008cc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80008cc:	6802      	ldr	r2, [r0, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_TIM_Base_MspInit+0x28>)
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d000      	beq.n	80008d6 <HAL_TIM_Base_MspInit+0xa>
 80008d4:	4770      	bx	lr
{
 80008d6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008d8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008dc:	699a      	ldr	r2, [r3, #24]
 80008de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80008e2:	619a      	str	r2, [r3, #24]
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008ee:	b002      	add	sp, #8
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40012c00 	.word	0x40012c00

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b510      	push	{r4, lr}
 80008fa:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	2300      	movs	r3, #0
 80008fe:	9302      	str	r3, [sp, #8]
 8000900:	9303      	str	r3, [sp, #12]
 8000902:	9304      	str	r3, [sp, #16]
 8000904:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8000906:	6802      	ldr	r2, [r0, #0]
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_UART_MspInit+0x70>)
 800090a:	429a      	cmp	r2, r3
 800090c:	d001      	beq.n	8000912 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800090e:	b006      	add	sp, #24
 8000910:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000912:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000916:	699a      	ldr	r2, [r3, #24]
 8000918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800091c:	619a      	str	r2, [r3, #24]
 800091e:	699a      	ldr	r2, [r3, #24]
 8000920:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000924:	9200      	str	r2, [sp, #0]
 8000926:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	699a      	ldr	r2, [r3, #24]
 800092a:	f042 0204 	orr.w	r2, r2, #4
 800092e:	619a      	str	r2, [r3, #24]
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800093a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	4c08      	ldr	r4, [pc, #32]	; (800096c <HAL_UART_MspInit+0x74>)
 800094a:	a902      	add	r1, sp, #8
 800094c:	4620      	mov	r0, r4
 800094e:	f000 f8ff 	bl	8000b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000956:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	a902      	add	r1, sp, #8
 8000960:	4620      	mov	r0, r4
 8000962:	f000 f8f5 	bl	8000b50 <HAL_GPIO_Init>
}
 8000966:	e7d2      	b.n	800090e <HAL_UART_MspInit+0x16>
 8000968:	40013800 	.word	0x40013800
 800096c:	40010800 	.word	0x40010800

08000970 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler>

08000972 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler>

08000974 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler>

08000976 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler>

08000978 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler>

0800097a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000982:	f000 f861 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000986:	bd08      	pop	{r3, pc}

08000988 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	4770      	bx	lr
	...

0800098c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	; (80009d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009b2:	f7ff ffe9 	bl	8000988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f000 ff01 	bl	80017bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff fe59 	bl	8000670 <main>
  bx lr
 80009be:	4770      	bx	lr
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c8:	08001944 	.word	0x08001944
  ldr r2, =_sbss
 80009cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d0:	200000bc 	.word	0x200000bc

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>
	...

080009d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b510      	push	{r4, lr}
 80009da:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_InitTick+0x40>)
 80009de:	7818      	ldrb	r0, [r3, #0]
 80009e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_InitTick+0x44>)
 80009ea:	6810      	ldr	r0, [r2, #0]
 80009ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80009f0:	f000 f89a 	bl	8000b28 <HAL_SYSTICK_Config>
 80009f4:	b968      	cbnz	r0, 8000a12 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	2c0f      	cmp	r4, #15
 80009f8:	d901      	bls.n	80009fe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80009fa:	2001      	movs	r0, #1
 80009fc:	e00a      	b.n	8000a14 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fe:	2200      	movs	r2, #0
 8000a00:	4621      	mov	r1, r4
 8000a02:	f04f 30ff 	mov.w	r0, #4294967295
 8000a06:	f000 f857 	bl	8000ab8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_InitTick+0x48>)
 8000a0c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2000      	movs	r0, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
}
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	20000004 	.word	0x20000004
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000008 	.word	0x20000008

08000a24 <HAL_Init>:
{
 8000a24:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x20>)
 8000a28:	6813      	ldr	r3, [r2, #0]
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f82f 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	200f      	movs	r0, #15
 8000a38:	f7ff ffce 	bl	80009d8 <HAL_InitTick>
  HAL_MspInit();
 8000a3c:	f7ff ff24 	bl	8000888 <HAL_MspInit>
}
 8000a40:	2000      	movs	r0, #0
 8000a42:	bd08      	pop	{r3, pc}
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <HAL_IncTick+0x10>)
 8000a4a:	6811      	ldr	r1, [r2, #0]
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_IncTick+0x14>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	440b      	add	r3, r1
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	200000b8 	.word	0x200000b8
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a60:	4b01      	ldr	r3, [pc, #4]	; (8000a68 <HAL_GetTick+0x8>)
 8000a62:	6818      	ldr	r0, [r3, #0]
}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	200000b8 	.word	0x200000b8

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b538      	push	{r3, r4, r5, lr}
 8000a6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a70:	f7ff fff6 	bl	8000a60 <HAL_GetTick>
 8000a74:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a76:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a7a:	d002      	beq.n	8000a82 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <HAL_Delay+0x24>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a82:	f7ff ffed 	bl	8000a60 <HAL_GetTick>
 8000a86:	1b40      	subs	r0, r0, r5
 8000a88:	42a0      	cmp	r0, r4
 8000a8a:	d3fa      	bcc.n	8000a82 <HAL_Delay+0x16>
  {
  }
}
 8000a8c:	bd38      	pop	{r3, r4, r5, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a96:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a9c:	041b      	lsls	r3, r3, #16
 8000a9e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa0:	0200      	lsls	r0, r0, #8
 8000aa2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ab0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_NVIC_SetPriority+0x68>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac2:	f1c3 0c07 	rsb	ip, r3, #7
 8000ac6:	f1bc 0f04 	cmp.w	ip, #4
 8000aca:	bf28      	it	cs
 8000acc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad0:	f103 0e04 	add.w	lr, r3, #4
 8000ad4:	f1be 0f06 	cmp.w	lr, #6
 8000ad8:	d918      	bls.n	8000b0c <HAL_NVIC_SetPriority+0x54>
 8000ada:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 3eff 	mov.w	lr, #4294967295
 8000ae0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000ae4:	ea21 010c 	bic.w	r1, r1, ip
 8000ae8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aea:	fa0e f303 	lsl.w	r3, lr, r3
 8000aee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000af4:	2800      	cmp	r0, #0
 8000af6:	db0b      	blt.n	8000b10 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	0109      	lsls	r1, r1, #4
 8000afa:	b2c9      	uxtb	r1, r1
 8000afc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b00:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b04:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b08:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e7e5      	b.n	8000adc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	f000 000f 	and.w	r0, r0, #15
 8000b14:	0109      	lsls	r1, r1, #4
 8000b16:	b2c9      	uxtb	r1, r1
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_NVIC_SetPriority+0x6c>)
 8000b1a:	5419      	strb	r1, [r3, r0]
 8000b1c:	e7f4      	b.n	8000b08 <HAL_NVIC_SetPriority+0x50>
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	e000ed14 	.word	0xe000ed14

08000b28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	3801      	subs	r0, #1
 8000b2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2e:	d20b      	bcs.n	8000b48 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b34:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <HAL_SYSTICK_Config+0x24>)
 8000b38:	21f0      	movs	r1, #240	; 0xf0
 8000b3a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3e:	2000      	movs	r0, #0
 8000b40:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	2207      	movs	r2, #7
 8000b44:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b46:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b48:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b54:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000b56:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b58:	e0a6      	b.n	8000ca8 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b5a:	4d80      	ldr	r5, [pc, #512]	; (8000d5c <HAL_GPIO_Init+0x20c>)
 8000b5c:	42aa      	cmp	r2, r5
 8000b5e:	d010      	beq.n	8000b82 <HAL_GPIO_Init+0x32>
 8000b60:	d907      	bls.n	8000b72 <HAL_GPIO_Init+0x22>
 8000b62:	4d7f      	ldr	r5, [pc, #508]	; (8000d60 <HAL_GPIO_Init+0x210>)
 8000b64:	42aa      	cmp	r2, r5
 8000b66:	d00c      	beq.n	8000b82 <HAL_GPIO_Init+0x32>
 8000b68:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8000b6c:	42aa      	cmp	r2, r5
 8000b6e:	d008      	beq.n	8000b82 <HAL_GPIO_Init+0x32>
 8000b70:	e013      	b.n	8000b9a <HAL_GPIO_Init+0x4a>
 8000b72:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000b76:	42aa      	cmp	r2, r5
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x32>
 8000b7a:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8000b7e:	42aa      	cmp	r2, r5
 8000b80:	d107      	bne.n	8000b92 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b82:	688a      	ldr	r2, [r1, #8]
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	d058      	beq.n	8000c3a <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b88:	2a01      	cmp	r2, #1
 8000b8a:	d051      	beq.n	8000c30 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000b8c:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b8e:	2408      	movs	r4, #8
 8000b90:	e003      	b.n	8000b9a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000b92:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000b96:	42aa      	cmp	r2, r5
 8000b98:	d0f3      	beq.n	8000b82 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b9a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000b9e:	d84e      	bhi.n	8000c3e <HAL_GPIO_Init+0xee>
 8000ba0:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ba2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000ba6:	d84c      	bhi.n	8000c42 <HAL_GPIO_Init+0xf2>
 8000ba8:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bac:	6833      	ldr	r3, [r6, #0]
 8000bae:	250f      	movs	r5, #15
 8000bb0:	4095      	lsls	r5, r2
 8000bb2:	ea23 0305 	bic.w	r3, r3, r5
 8000bb6:	fa04 f202 	lsl.w	r2, r4, r2
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bbe:	684b      	ldr	r3, [r1, #4]
 8000bc0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000bc4:	d06e      	beq.n	8000ca4 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc6:	4b67      	ldr	r3, [pc, #412]	; (8000d64 <HAL_GPIO_Init+0x214>)
 8000bc8:	699a      	ldr	r2, [r3, #24]
 8000bca:	f042 0201 	orr.w	r2, r2, #1
 8000bce:	619a      	str	r2, [r3, #24]
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000bda:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000bde:	1c95      	adds	r5, r2, #2
 8000be0:	4b61      	ldr	r3, [pc, #388]	; (8000d68 <HAL_GPIO_Init+0x218>)
 8000be2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000be6:	f00c 0303 	and.w	r3, ip, #3
 8000bea:	009d      	lsls	r5, r3, #2
 8000bec:	230f      	movs	r3, #15
 8000bee:	40ab      	lsls	r3, r5
 8000bf0:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bf4:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <HAL_GPIO_Init+0x21c>)
 8000bf6:	4298      	cmp	r0, r3
 8000bf8:	d029      	beq.n	8000c4e <HAL_GPIO_Init+0xfe>
 8000bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bfe:	4298      	cmp	r0, r3
 8000c00:	f000 808e 	beq.w	8000d20 <HAL_GPIO_Init+0x1d0>
 8000c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	f000 808b 	beq.w	8000d24 <HAL_GPIO_Init+0x1d4>
 8000c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c12:	4298      	cmp	r0, r3
 8000c14:	d019      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000c16:	2304      	movs	r3, #4
 8000c18:	e01a      	b.n	8000c50 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c1a:	68cc      	ldr	r4, [r1, #12]
          break;
 8000c1c:	e7bd      	b.n	8000b9a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c1e:	68cc      	ldr	r4, [r1, #12]
 8000c20:	3404      	adds	r4, #4
          break;
 8000c22:	e7ba      	b.n	8000b9a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c24:	68cc      	ldr	r4, [r1, #12]
 8000c26:	3408      	adds	r4, #8
          break;
 8000c28:	e7b7      	b.n	8000b9a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c2a:	68cc      	ldr	r4, [r1, #12]
 8000c2c:	340c      	adds	r4, #12
          break;
 8000c2e:	e7b4      	b.n	8000b9a <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000c30:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c32:	2408      	movs	r4, #8
 8000c34:	e7b1      	b.n	8000b9a <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c36:	2400      	movs	r4, #0
 8000c38:	e7af      	b.n	8000b9a <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c3a:	2404      	movs	r4, #4
 8000c3c:	e7ad      	b.n	8000b9a <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c3e:	1d06      	adds	r6, r0, #4
 8000c40:	e7af      	b.n	8000ba2 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c42:	f1ac 0208 	sub.w	r2, ip, #8
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	e7b0      	b.n	8000bac <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_Init+0x100>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	40ab      	lsls	r3, r5
 8000c52:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000c54:	3202      	adds	r2, #2
 8000c56:	4d44      	ldr	r5, [pc, #272]	; (8000d68 <HAL_GPIO_Init+0x218>)
 8000c58:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c5c:	684b      	ldr	r3, [r1, #4]
 8000c5e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c62:	d061      	beq.n	8000d28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c64:	4a42      	ldr	r2, [pc, #264]	; (8000d70 <HAL_GPIO_Init+0x220>)
 8000c66:	6813      	ldr	r3, [r2, #0]
 8000c68:	ea43 030e 	orr.w	r3, r3, lr
 8000c6c:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c6e:	684b      	ldr	r3, [r1, #4]
 8000c70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c74:	d05e      	beq.n	8000d34 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c76:	4a3e      	ldr	r2, [pc, #248]	; (8000d70 <HAL_GPIO_Init+0x220>)
 8000c78:	6853      	ldr	r3, [r2, #4]
 8000c7a:	ea43 030e 	orr.w	r3, r3, lr
 8000c7e:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c80:	684b      	ldr	r3, [r1, #4]
 8000c82:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000c86:	d05b      	beq.n	8000d40 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c88:	4a39      	ldr	r2, [pc, #228]	; (8000d70 <HAL_GPIO_Init+0x220>)
 8000c8a:	6893      	ldr	r3, [r2, #8]
 8000c8c:	ea43 030e 	orr.w	r3, r3, lr
 8000c90:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c92:	684b      	ldr	r3, [r1, #4]
 8000c94:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000c98:	d058      	beq.n	8000d4c <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c9a:	4a35      	ldr	r2, [pc, #212]	; (8000d70 <HAL_GPIO_Init+0x220>)
 8000c9c:	68d3      	ldr	r3, [r2, #12]
 8000c9e:	ea43 030e 	orr.w	r3, r3, lr
 8000ca2:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000ca4:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca8:	680a      	ldr	r2, [r1, #0]
 8000caa:	fa32 f30c 	lsrs.w	r3, r2, ip
 8000cae:	d053      	beq.n	8000d58 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cb6:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8000cba:	ea33 0202 	bics.w	r2, r3, r2
 8000cbe:	d1f1      	bne.n	8000ca4 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8000cc0:	684a      	ldr	r2, [r1, #4]
 8000cc2:	2a12      	cmp	r2, #18
 8000cc4:	f63f af49 	bhi.w	8000b5a <HAL_GPIO_Init+0xa>
 8000cc8:	2a12      	cmp	r2, #18
 8000cca:	f63f af66 	bhi.w	8000b9a <HAL_GPIO_Init+0x4a>
 8000cce:	a501      	add	r5, pc, #4	; (adr r5, 8000cd4 <HAL_GPIO_Init+0x184>)
 8000cd0:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8000cd4:	08000b83 	.word	0x08000b83
 8000cd8:	08000c1b 	.word	0x08000c1b
 8000cdc:	08000c25 	.word	0x08000c25
 8000ce0:	08000c37 	.word	0x08000c37
 8000ce4:	08000b9b 	.word	0x08000b9b
 8000ce8:	08000b9b 	.word	0x08000b9b
 8000cec:	08000b9b 	.word	0x08000b9b
 8000cf0:	08000b9b 	.word	0x08000b9b
 8000cf4:	08000b9b 	.word	0x08000b9b
 8000cf8:	08000b9b 	.word	0x08000b9b
 8000cfc:	08000b9b 	.word	0x08000b9b
 8000d00:	08000b9b 	.word	0x08000b9b
 8000d04:	08000b9b 	.word	0x08000b9b
 8000d08:	08000b9b 	.word	0x08000b9b
 8000d0c:	08000b9b 	.word	0x08000b9b
 8000d10:	08000b9b 	.word	0x08000b9b
 8000d14:	08000b9b 	.word	0x08000b9b
 8000d18:	08000c1f 	.word	0x08000c1f
 8000d1c:	08000c2b 	.word	0x08000c2b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d20:	2301      	movs	r3, #1
 8000d22:	e795      	b.n	8000c50 <HAL_GPIO_Init+0x100>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e793      	b.n	8000c50 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d28:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <HAL_GPIO_Init+0x220>)
 8000d2a:	6813      	ldr	r3, [r2, #0]
 8000d2c:	ea23 030e 	bic.w	r3, r3, lr
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	e79c      	b.n	8000c6e <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_GPIO_Init+0x220>)
 8000d36:	6853      	ldr	r3, [r2, #4]
 8000d38:	ea23 030e 	bic.w	r3, r3, lr
 8000d3c:	6053      	str	r3, [r2, #4]
 8000d3e:	e79f      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_GPIO_Init+0x220>)
 8000d42:	6893      	ldr	r3, [r2, #8]
 8000d44:	ea23 030e 	bic.w	r3, r3, lr
 8000d48:	6093      	str	r3, [r2, #8]
 8000d4a:	e7a2      	b.n	8000c92 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d4c:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_GPIO_Init+0x220>)
 8000d4e:	68d3      	ldr	r3, [r2, #12]
 8000d50:	ea23 030e 	bic.w	r3, r3, lr
 8000d54:	60d3      	str	r3, [r2, #12]
 8000d56:	e7a5      	b.n	8000ca4 <HAL_GPIO_Init+0x154>
  }
}
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
 8000d5c:	10220000 	.word	0x10220000
 8000d60:	10310000 	.word	0x10310000
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d74:	b10a      	cbz	r2, 8000d7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d76:	6101      	str	r1, [r0, #16]
 8000d78:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d7a:	0409      	lsls	r1, r1, #16
 8000d7c:	6101      	str	r1, [r0, #16]
  }
}
 8000d7e:	4770      	bx	lr

08000d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000d80:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <RCC_Delay+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <RCC_Delay+0x28>)
 8000d88:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8c:	0a5b      	lsrs	r3, r3, #9
 8000d8e:	fb00 f303 	mul.w	r3, r0, r3
 8000d92:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000d94:	bf00      	nop
  }
  while (Delay --);
 8000d96:	9b01      	ldr	r3, [sp, #4]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	9201      	str	r2, [sp, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f9      	bne.n	8000d94 <RCC_Delay+0x14>
}
 8000da0:	b002      	add	sp, #8
 8000da2:	4770      	bx	lr
 8000da4:	20000000 	.word	0x20000000
 8000da8:	10624dd3 	.word	0x10624dd3

08000dac <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000dac:	2800      	cmp	r0, #0
 8000dae:	f000 81f1 	beq.w	8001194 <HAL_RCC_OscConfig+0x3e8>
{
 8000db2:	b570      	push	{r4, r5, r6, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db8:	6803      	ldr	r3, [r0, #0]
 8000dba:	f013 0f01 	tst.w	r3, #1
 8000dbe:	d02c      	beq.n	8000e1a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc0:	4b99      	ldr	r3, [pc, #612]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d01d      	beq.n	8000e08 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dcc:	4b96      	ldr	r3, [pc, #600]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d012      	beq.n	8000dfe <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd8:	6863      	ldr	r3, [r4, #4]
 8000dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dde:	d041      	beq.n	8000e64 <HAL_RCC_OscConfig+0xb8>
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d155      	bne.n	8000e90 <HAL_RCC_OscConfig+0xe4>
 8000de4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000de8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	e037      	b.n	8000e6e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dfe:	4b8a      	ldr	r3, [pc, #552]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e06:	d0e7      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e08:	4b87      	ldr	r3, [pc, #540]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e10:	d003      	beq.n	8000e1a <HAL_RCC_OscConfig+0x6e>
 8000e12:	6863      	ldr	r3, [r4, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 81bf 	beq.w	8001198 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	f013 0f02 	tst.w	r3, #2
 8000e20:	d075      	beq.n	8000f0e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e22:	4b81      	ldr	r3, [pc, #516]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f013 0f0c 	tst.w	r3, #12
 8000e2a:	d05f      	beq.n	8000eec <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e2c:	4b7e      	ldr	r3, [pc, #504]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d054      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e38:	6923      	ldr	r3, [r4, #16]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 808a 	beq.w	8000f54 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8000e40:	4b7a      	ldr	r3, [pc, #488]	; (800102c <HAL_RCC_OscConfig+0x280>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e46:	f7ff fe0b 	bl	8000a60 <HAL_GetTick>
 8000e4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	4b76      	ldr	r3, [pc, #472]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f013 0f02 	tst.w	r3, #2
 8000e54:	d175      	bne.n	8000f42 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e56:	f7ff fe03 	bl	8000a60 <HAL_GetTick>
 8000e5a:	1b40      	subs	r0, r0, r5
 8000e5c:	2802      	cmp	r0, #2
 8000e5e:	d9f5      	bls.n	8000e4c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000e60:	2003      	movs	r0, #3
 8000e62:	e19e      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e64:	4a70      	ldr	r2, [pc, #448]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e6e:	6863      	ldr	r3, [r4, #4]
 8000e70:	b343      	cbz	r3, 8000ec4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000e72:	f7ff fdf5 	bl	8000a60 <HAL_GetTick>
 8000e76:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e78:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e80:	d1cb      	bne.n	8000e1a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e82:	f7ff fded 	bl	8000a60 <HAL_GetTick>
 8000e86:	1b40      	subs	r0, r0, r5
 8000e88:	2864      	cmp	r0, #100	; 0x64
 8000e8a:	d9f5      	bls.n	8000e78 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	e188      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e94:	d009      	beq.n	8000eaa <HAL_RCC_OscConfig+0xfe>
 8000e96:	4b64      	ldr	r3, [pc, #400]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e7e1      	b.n	8000e6e <HAL_RCC_OscConfig+0xc2>
 8000eaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eae:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e7d4      	b.n	8000e6e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fdcc 	bl	8000a60 <HAL_GetTick>
 8000ec8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eca:	4b57      	ldr	r3, [pc, #348]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ed2:	d0a2      	beq.n	8000e1a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fdc4 	bl	8000a60 <HAL_GetTick>
 8000ed8:	1b40      	subs	r0, r0, r5
 8000eda:	2864      	cmp	r0, #100	; 0x64
 8000edc:	d9f5      	bls.n	8000eca <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000ede:	2003      	movs	r0, #3
 8000ee0:	e15f      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ee2:	4b51      	ldr	r3, [pc, #324]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000eea:	d1a5      	bne.n	8000e38 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eec:	4b4e      	ldr	r3, [pc, #312]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f013 0f02 	tst.w	r3, #2
 8000ef4:	d003      	beq.n	8000efe <HAL_RCC_OscConfig+0x152>
 8000ef6:	6923      	ldr	r3, [r4, #16]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	f040 814f 	bne.w	800119c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000efe:	4a4a      	ldr	r2, [pc, #296]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f06:	6961      	ldr	r1, [r4, #20]
 8000f08:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f0c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	f013 0f08 	tst.w	r3, #8
 8000f14:	d033      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f16:	69a3      	ldr	r3, [r4, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d05c      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8000f1c:	4b43      	ldr	r3, [pc, #268]	; (800102c <HAL_RCC_OscConfig+0x280>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000f24:	f7ff fd9c 	bl	8000a60 <HAL_GetTick>
 8000f28:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	f013 0f02 	tst.w	r3, #2
 8000f32:	d121      	bne.n	8000f78 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f34:	f7ff fd94 	bl	8000a60 <HAL_GetTick>
 8000f38:	1b40      	subs	r0, r0, r5
 8000f3a:	2802      	cmp	r0, #2
 8000f3c:	d9f5      	bls.n	8000f2a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8000f3e:	2003      	movs	r0, #3
 8000f40:	e12f      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f42:	4a39      	ldr	r2, [pc, #228]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000f44:	6813      	ldr	r3, [r2, #0]
 8000f46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f4a:	6961      	ldr	r1, [r4, #20]
 8000f4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e7dc      	b.n	8000f0e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8000f54:	4b35      	ldr	r3, [pc, #212]	; (800102c <HAL_RCC_OscConfig+0x280>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fd81 	bl	8000a60 <HAL_GetTick>
 8000f5e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f60:	4b31      	ldr	r3, [pc, #196]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f013 0f02 	tst.w	r3, #2
 8000f68:	d0d1      	beq.n	8000f0e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f6a:	f7ff fd79 	bl	8000a60 <HAL_GetTick>
 8000f6e:	1b40      	subs	r0, r0, r5
 8000f70:	2802      	cmp	r0, #2
 8000f72:	d9f5      	bls.n	8000f60 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8000f74:	2003      	movs	r0, #3
 8000f76:	e114      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f7ff ff01 	bl	8000d80 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	f013 0f04 	tst.w	r3, #4
 8000f84:	f000 8096 	beq.w	80010b4 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f90:	d134      	bne.n	8000ffc <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f9a:	61da      	str	r2, [r3, #28]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fa6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_RCC_OscConfig+0x284>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fb0:	d026      	beq.n	8001000 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb2:	68e3      	ldr	r3, [r4, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d03d      	beq.n	8001034 <HAL_RCC_OscConfig+0x288>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d153      	bne.n	8001064 <HAL_RCC_OscConfig+0x2b8>
 8000fbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fc0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000fc4:	6a1a      	ldr	r2, [r3, #32]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	621a      	str	r2, [r3, #32]
 8000fcc:	6a1a      	ldr	r2, [r3, #32]
 8000fce:	f022 0204 	bic.w	r2, r2, #4
 8000fd2:	621a      	str	r2, [r3, #32]
 8000fd4:	e033      	b.n	800103e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_RCC_OscConfig+0x280>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000fde:	f7ff fd3f 	bl	8000a60 <HAL_GetTick>
 8000fe2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_RCC_OscConfig+0x27c>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	f013 0f02 	tst.w	r3, #2
 8000fec:	d0c7      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fee:	f7ff fd37 	bl	8000a60 <HAL_GetTick>
 8000ff2:	1b40      	subs	r0, r0, r5
 8000ff4:	2802      	cmp	r0, #2
 8000ff6:	d9f5      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	e0d2      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8000ffc:	2500      	movs	r5, #0
 8000ffe:	e7d3      	b.n	8000fa8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <HAL_RCC_OscConfig+0x284>)
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001008:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800100a:	f7ff fd29 	bl	8000a60 <HAL_GetTick>
 800100e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_RCC_OscConfig+0x284>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001018:	d1cb      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101a:	f7ff fd21 	bl	8000a60 <HAL_GetTick>
 800101e:	1b80      	subs	r0, r0, r6
 8001020:	2864      	cmp	r0, #100	; 0x64
 8001022:	d9f5      	bls.n	8001010 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8001024:	2003      	movs	r0, #3
 8001026:	e0bc      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
 8001028:	40021000 	.word	0x40021000
 800102c:	42420000 	.word	0x42420000
 8001030:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001034:	4a5f      	ldr	r2, [pc, #380]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 8001036:	6a13      	ldr	r3, [r2, #32]
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800103e:	68e3      	ldr	r3, [r4, #12]
 8001040:	b333      	cbz	r3, 8001090 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001042:	f7ff fd0d 	bl	8000a60 <HAL_GetTick>
 8001046:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001048:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	f013 0f02 	tst.w	r3, #2
 8001050:	d12f      	bne.n	80010b2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f7ff fd05 	bl	8000a60 <HAL_GetTick>
 8001056:	1b80      	subs	r0, r0, r6
 8001058:	f241 3388 	movw	r3, #5000	; 0x1388
 800105c:	4298      	cmp	r0, r3
 800105e:	d9f3      	bls.n	8001048 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8001060:	2003      	movs	r0, #3
 8001062:	e09e      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001064:	2b05      	cmp	r3, #5
 8001066:	d009      	beq.n	800107c <HAL_RCC_OscConfig+0x2d0>
 8001068:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 800106a:	6a1a      	ldr	r2, [r3, #32]
 800106c:	f022 0201 	bic.w	r2, r2, #1
 8001070:	621a      	str	r2, [r3, #32]
 8001072:	6a1a      	ldr	r2, [r3, #32]
 8001074:	f022 0204 	bic.w	r2, r2, #4
 8001078:	621a      	str	r2, [r3, #32]
 800107a:	e7e0      	b.n	800103e <HAL_RCC_OscConfig+0x292>
 800107c:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 800107e:	6a1a      	ldr	r2, [r3, #32]
 8001080:	f042 0204 	orr.w	r2, r2, #4
 8001084:	621a      	str	r2, [r3, #32]
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	f042 0201 	orr.w	r2, r2, #1
 800108c:	621a      	str	r2, [r3, #32]
 800108e:	e7d6      	b.n	800103e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8001090:	f7ff fce6 	bl	8000a60 <HAL_GetTick>
 8001094:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001096:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	f013 0f02 	tst.w	r3, #2
 800109e:	d008      	beq.n	80010b2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a0:	f7ff fcde 	bl	8000a60 <HAL_GetTick>
 80010a4:	1b80      	subs	r0, r0, r6
 80010a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d9f3      	bls.n	8001096 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80010ae:	2003      	movs	r0, #3
 80010b0:	e077      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80010b2:	b9e5      	cbnz	r5, 80010ee <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b4:	69e3      	ldr	r3, [r4, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d072      	beq.n	80011a0 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ba:	4a3e      	ldr	r2, [pc, #248]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 80010bc:	6852      	ldr	r2, [r2, #4]
 80010be:	f002 020c 	and.w	r2, r2, #12
 80010c2:	2a08      	cmp	r2, #8
 80010c4:	d056      	beq.n	8001174 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d017      	beq.n	80010fa <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_RCC_OscConfig+0x40c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcc6 	bl	8000a60 <HAL_GetTick>
 80010d4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010de:	d047      	beq.n	8001170 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e0:	f7ff fcbe 	bl	8000a60 <HAL_GetTick>
 80010e4:	1b00      	subs	r0, r0, r4
 80010e6:	2802      	cmp	r0, #2
 80010e8:	d9f5      	bls.n	80010d6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80010ea:	2003      	movs	r0, #3
 80010ec:	e059      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ee:	4a31      	ldr	r2, [pc, #196]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 80010f0:	69d3      	ldr	r3, [r2, #28]
 80010f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f6:	61d3      	str	r3, [r2, #28]
 80010f8:	e7dc      	b.n	80010b4 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_RCC_OscConfig+0x40c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001100:	f7ff fcae 	bl	8000a60 <HAL_GetTick>
 8001104:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800110e:	d006      	beq.n	800111e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001110:	f7ff fca6 	bl	8000a60 <HAL_GetTick>
 8001114:	1b40      	subs	r0, r0, r5
 8001116:	2802      	cmp	r0, #2
 8001118:	d9f5      	bls.n	8001106 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800111a:	2003      	movs	r0, #3
 800111c:	e041      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800111e:	6a23      	ldr	r3, [r4, #32]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001124:	d01a      	beq.n	800115c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001126:	4923      	ldr	r1, [pc, #140]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 8001128:	684b      	ldr	r3, [r1, #4]
 800112a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800112e:	6a22      	ldr	r2, [r4, #32]
 8001130:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001132:	4302      	orrs	r2, r0
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_RCC_OscConfig+0x40c>)
 800113a:	2201      	movs	r2, #1
 800113c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800113e:	f7ff fc8f 	bl	8000a60 <HAL_GetTick>
 8001142:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800114c:	d10e      	bne.n	800116c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff fc87 	bl	8000a60 <HAL_GetTick>
 8001152:	1b00      	subs	r0, r0, r4
 8001154:	2802      	cmp	r0, #2
 8001156:	d9f5      	bls.n	8001144 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001158:	2003      	movs	r0, #3
 800115a:	e022      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800115c:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 800115e:	6853      	ldr	r3, [r2, #4]
 8001160:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001164:	68a1      	ldr	r1, [r4, #8]
 8001166:	430b      	orrs	r3, r1
 8001168:	6053      	str	r3, [r2, #4]
 800116a:	e7dc      	b.n	8001126 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800116c:	2000      	movs	r0, #0
 800116e:	e018      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
 8001170:	2000      	movs	r0, #0
 8001172:	e016      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001174:	2b01      	cmp	r3, #1
 8001176:	d016      	beq.n	80011a6 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_RCC_OscConfig+0x408>)
 800117a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800117c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001180:	6a22      	ldr	r2, [r4, #32]
 8001182:	4291      	cmp	r1, r2
 8001184:	d111      	bne.n	80011aa <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001186:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800118a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118c:	4293      	cmp	r3, r2
 800118e:	d10e      	bne.n	80011ae <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001190:	2000      	movs	r0, #0
 8001192:	e006      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001194:	2001      	movs	r0, #1
}
 8001196:	4770      	bx	lr
        return HAL_ERROR;
 8001198:	2001      	movs	r0, #1
 800119a:	e002      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800119c:	2001      	movs	r0, #1
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80011a0:	2000      	movs	r0, #0
}
 80011a2:	b002      	add	sp, #8
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80011a6:	2001      	movs	r0, #1
 80011a8:	e7fb      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80011aa:	2001      	movs	r0, #1
 80011ac:	e7f9      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
 80011ae:	2001      	movs	r0, #1
 80011b0:	e7f7      	b.n	80011a2 <HAL_RCC_OscConfig+0x3f6>
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	42420000 	.word	0x42420000

080011bc <HAL_RCC_GetSysClockFreq>:
{
 80011bc:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_RCC_GetSysClockFreq+0x60>)
 80011c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c2:	f10d 0c18 	add.w	ip, sp, #24
 80011c6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011ca:	f240 2301 	movw	r3, #513	; 0x201
 80011ce:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_RCC_GetSysClockFreq+0x64>)
 80011d4:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011d6:	f003 020c 	and.w	r2, r3, #12
 80011da:	2a08      	cmp	r2, #8
 80011dc:	d002      	beq.n	80011e4 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80011de:	4811      	ldr	r0, [pc, #68]	; (8001224 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80011e0:	b006      	add	sp, #24
 80011e2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011e4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80011e8:	3218      	adds	r2, #24
 80011ea:	446a      	add	r2, sp
 80011ec:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80011f4:	d00d      	beq.n	8001212 <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_RCC_GetSysClockFreq+0x64>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80011fe:	3318      	adds	r3, #24
 8001200:	446b      	add	r3, sp
 8001202:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_RCC_GetSysClockFreq+0x68>)
 8001208:	fb02 f000 	mul.w	r0, r2, r0
 800120c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001210:	e7e6      	b.n	80011e0 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001214:	fb03 f000 	mul.w	r0, r3, r0
 8001218:	e7e2      	b.n	80011e0 <HAL_RCC_GetSysClockFreq+0x24>
 800121a:	bf00      	nop
 800121c:	08001928 	.word	0x08001928
 8001220:	40021000 	.word	0x40021000
 8001224:	007a1200 	.word	0x007a1200
 8001228:	003d0900 	.word	0x003d0900

0800122c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800122c:	2800      	cmp	r0, #0
 800122e:	f000 80a0 	beq.w	8001372 <HAL_RCC_ClockConfig+0x146>
{
 8001232:	b570      	push	{r4, r5, r6, lr}
 8001234:	460d      	mov	r5, r1
 8001236:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001238:	4b52      	ldr	r3, [pc, #328]	; (8001384 <HAL_RCC_ClockConfig+0x158>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	428b      	cmp	r3, r1
 8001242:	d20b      	bcs.n	800125c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_RCC_ClockConfig+0x158>)
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	f023 0307 	bic.w	r3, r3, #7
 800124c:	430b      	orrs	r3, r1
 800124e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001250:	6813      	ldr	r3, [r2, #0]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	428b      	cmp	r3, r1
 8001258:	f040 808d 	bne.w	8001376 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	f013 0f02 	tst.w	r3, #2
 8001262:	d017      	beq.n	8001294 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001264:	f013 0f04 	tst.w	r3, #4
 8001268:	d004      	beq.n	8001274 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800126a:	4a47      	ldr	r2, [pc, #284]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 800126c:	6853      	ldr	r3, [r2, #4]
 800126e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001272:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	f013 0f08 	tst.w	r3, #8
 800127a:	d004      	beq.n	8001286 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800127c:	4a42      	ldr	r2, [pc, #264]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 800127e:	6853      	ldr	r3, [r2, #4]
 8001280:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001284:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001286:	4a40      	ldr	r2, [pc, #256]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 8001288:	6853      	ldr	r3, [r2, #4]
 800128a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800128e:	68a1      	ldr	r1, [r4, #8]
 8001290:	430b      	orrs	r3, r1
 8001292:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	f013 0f01 	tst.w	r3, #1
 800129a:	d031      	beq.n	8001300 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129c:	6863      	ldr	r3, [r4, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d020      	beq.n	80012e4 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d025      	beq.n	80012f2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	4a38      	ldr	r2, [pc, #224]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	f012 0f02 	tst.w	r2, #2
 80012ae:	d064      	beq.n	800137a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b0:	4935      	ldr	r1, [pc, #212]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 80012b2:	684a      	ldr	r2, [r1, #4]
 80012b4:	f022 0203 	bic.w	r2, r2, #3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80012bc:	f7ff fbd0 	bl	8000a60 <HAL_GetTick>
 80012c0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	6862      	ldr	r2, [r4, #4]
 80012cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012d0:	d016      	beq.n	8001300 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d2:	f7ff fbc5 	bl	8000a60 <HAL_GetTick>
 80012d6:	1b80      	subs	r0, r0, r6
 80012d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80012dc:	4298      	cmp	r0, r3
 80012de:	d9f0      	bls.n	80012c2 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80012e0:	2003      	movs	r0, #3
 80012e2:	e045      	b.n	8001370 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e4:	4a28      	ldr	r2, [pc, #160]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80012ec:	d1e0      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80012ee:	2001      	movs	r0, #1
 80012f0:	e03e      	b.n	8001370 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f2:	4a25      	ldr	r2, [pc, #148]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012fa:	d1d9      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80012fc:	2001      	movs	r0, #1
 80012fe:	e037      	b.n	8001370 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_RCC_ClockConfig+0x158>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	42ab      	cmp	r3, r5
 800130a:	d90a      	bls.n	8001322 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130c:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_RCC_ClockConfig+0x158>)
 800130e:	6813      	ldr	r3, [r2, #0]
 8001310:	f023 0307 	bic.w	r3, r3, #7
 8001314:	432b      	orrs	r3, r5
 8001316:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001318:	6813      	ldr	r3, [r2, #0]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	42ab      	cmp	r3, r5
 8001320:	d12d      	bne.n	800137e <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	f013 0f04 	tst.w	r3, #4
 8001328:	d006      	beq.n	8001338 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 800132c:	6853      	ldr	r3, [r2, #4]
 800132e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001332:	68e1      	ldr	r1, [r4, #12]
 8001334:	430b      	orrs	r3, r1
 8001336:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	f013 0f08 	tst.w	r3, #8
 800133e:	d007      	beq.n	8001350 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 8001342:	6853      	ldr	r3, [r2, #4]
 8001344:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001348:	6921      	ldr	r1, [r4, #16]
 800134a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800134e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001350:	f7ff ff34 	bl	80011bc <HAL_RCC_GetSysClockFreq>
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800135c:	4a0b      	ldr	r2, [pc, #44]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	40d8      	lsrs	r0, r3
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_ClockConfig+0x164>)
 8001364:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_RCC_ClockConfig+0x168>)
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	f7ff fb35 	bl	80009d8 <HAL_InitTick>
  return HAL_OK;
 800136e:	2000      	movs	r0, #0
}
 8001370:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001372:	2001      	movs	r0, #1
}
 8001374:	4770      	bx	lr
    return HAL_ERROR;
 8001376:	2001      	movs	r0, #1
 8001378:	e7fa      	b.n	8001370 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
 800137c:	e7f8      	b.n	8001370 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800137e:	2001      	movs	r0, #1
 8001380:	e7f6      	b.n	8001370 <HAL_RCC_ClockConfig+0x144>
 8001382:	bf00      	nop
 8001384:	40022000 	.word	0x40022000
 8001388:	40021000 	.word	0x40021000
 800138c:	08001910 	.word	0x08001910
 8001390:	20000000 	.word	0x20000000
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_RCC_GetHCLKFreq>:
}
 8001398:	4b01      	ldr	r3, [pc, #4]	; (80013a0 <HAL_RCC_GetHCLKFreq+0x8>)
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000

080013a4 <HAL_RCC_GetPCLK1Freq>:
{
 80013a4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013a6:	f7ff fff7 	bl	8001398 <HAL_RCC_GetHCLKFreq>
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80013b2:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
}
 80013b6:	40d8      	lsrs	r0, r3
 80013b8:	bd08      	pop	{r3, pc}
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	08001920 	.word	0x08001920

080013c4 <HAL_RCC_GetPCLK2Freq>:
{
 80013c4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013c6:	f7ff ffe7 	bl	8001398 <HAL_RCC_GetHCLKFreq>
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80013d2:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80013d6:	40d8      	lsrs	r0, r3
 80013d8:	bd08      	pop	{r3, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	08001920 	.word	0x08001920

080013e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80013e4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80013e6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013e8:	6a04      	ldr	r4, [r0, #32]
 80013ea:	f024 0401 	bic.w	r4, r4, #1
 80013ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013f0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013f2:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013f6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013fa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80013fe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001400:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001402:	6203      	str	r3, [r0, #32]
}
 8001404:	bc10      	pop	{r4}
 8001406:	4770      	bx	lr

08001408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001408:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800140a:	6a04      	ldr	r4, [r0, #32]
 800140c:	f024 0410 	bic.w	r4, r4, #16
 8001410:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001412:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001414:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001416:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800141a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800141e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001422:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001426:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001428:	6203      	str	r3, [r0, #32]
}
 800142a:	bc10      	pop	{r4}
 800142c:	4770      	bx	lr

0800142e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800142e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001434:	430b      	orrs	r3, r1
 8001436:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800143a:	6083      	str	r3, [r0, #8]
}
 800143c:	4770      	bx	lr
	...

08001440 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001440:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d122      	bne.n	8001490 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800144a:	2302      	movs	r3, #2
 800144c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001450:	6803      	ldr	r3, [r0, #0]
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_TIM_Base_Start+0x58>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d010      	beq.n	800147a <HAL_TIM_Base_Start+0x3a>
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800145c:	d00d      	beq.n	800147a <HAL_TIM_Base_Start+0x3a>
 800145e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001462:	4293      	cmp	r3, r2
 8001464:	d009      	beq.n	800147a <HAL_TIM_Base_Start+0x3a>
 8001466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800146a:	4293      	cmp	r3, r2
 800146c:	d005      	beq.n	800147a <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001476:	2000      	movs	r0, #0
 8001478:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001480:	2a06      	cmp	r2, #6
 8001482:	d007      	beq.n	8001494 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800148c:	2000      	movs	r0, #0
 800148e:	4770      	bx	lr
    return HAL_ERROR;
 8001490:	2001      	movs	r0, #1
 8001492:	4770      	bx	lr
  return HAL_OK;
 8001494:	2000      	movs	r0, #0
}
 8001496:	4770      	bx	lr
 8001498:	40012c00 	.word	0x40012c00

0800149c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800149c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800149e:	4a1b      	ldr	r2, [pc, #108]	; (800150c <TIM_Base_SetConfig+0x70>)
 80014a0:	4290      	cmp	r0, r2
 80014a2:	d00a      	beq.n	80014ba <TIM_Base_SetConfig+0x1e>
 80014a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014a8:	d007      	beq.n	80014ba <TIM_Base_SetConfig+0x1e>
 80014aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80014ae:	4290      	cmp	r0, r2
 80014b0:	d003      	beq.n	80014ba <TIM_Base_SetConfig+0x1e>
 80014b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014b6:	4290      	cmp	r0, r2
 80014b8:	d103      	bne.n	80014c2 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014be:	684a      	ldr	r2, [r1, #4]
 80014c0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <TIM_Base_SetConfig+0x70>)
 80014c4:	4290      	cmp	r0, r2
 80014c6:	d00a      	beq.n	80014de <TIM_Base_SetConfig+0x42>
 80014c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014cc:	d007      	beq.n	80014de <TIM_Base_SetConfig+0x42>
 80014ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80014d2:	4290      	cmp	r0, r2
 80014d4:	d003      	beq.n	80014de <TIM_Base_SetConfig+0x42>
 80014d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014da:	4290      	cmp	r0, r2
 80014dc:	d103      	bne.n	80014e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80014de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014e2:	68ca      	ldr	r2, [r1, #12]
 80014e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014ea:	694a      	ldr	r2, [r1, #20]
 80014ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80014ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014f0:	688b      	ldr	r3, [r1, #8]
 80014f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80014f4:	680b      	ldr	r3, [r1, #0]
 80014f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <TIM_Base_SetConfig+0x70>)
 80014fa:	4298      	cmp	r0, r3
 80014fc:	d002      	beq.n	8001504 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80014fe:	2301      	movs	r3, #1
 8001500:	6143      	str	r3, [r0, #20]
}
 8001502:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001504:	690b      	ldr	r3, [r1, #16]
 8001506:	6303      	str	r3, [r0, #48]	; 0x30
 8001508:	e7f9      	b.n	80014fe <TIM_Base_SetConfig+0x62>
 800150a:	bf00      	nop
 800150c:	40012c00 	.word	0x40012c00

08001510 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001510:	b340      	cbz	r0, 8001564 <HAL_TIM_Base_Init+0x54>
{
 8001512:	b510      	push	{r4, lr}
 8001514:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001516:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800151a:	b1f3      	cbz	r3, 800155a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800151c:	2302      	movs	r3, #2
 800151e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001522:	4621      	mov	r1, r4
 8001524:	f851 0b04 	ldr.w	r0, [r1], #4
 8001528:	f7ff ffb8 	bl	800149c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800152c:	2301      	movs	r3, #1
 800152e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001532:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001536:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800153a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800153e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001542:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800154a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800154e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001552:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001556:	2000      	movs	r0, #0
}
 8001558:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800155a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800155e:	f7ff f9b5 	bl	80008cc <HAL_TIM_Base_MspInit>
 8001562:	e7db      	b.n	800151c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001564:	2001      	movs	r0, #1
}
 8001566:	4770      	bx	lr

08001568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001568:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800156a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800156c:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001570:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001574:	430a      	orrs	r2, r1
 8001576:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800157a:	6082      	str	r2, [r0, #8]
}
 800157c:	bc10      	pop	{r4}
 800157e:	4770      	bx	lr

08001580 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001580:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001584:	2b01      	cmp	r3, #1
 8001586:	d066      	beq.n	8001656 <HAL_TIM_ConfigClockSource+0xd6>
{
 8001588:	b510      	push	{r4, lr}
 800158a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800158c:	2301      	movs	r3, #1
 800158e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001592:	2302      	movs	r3, #2
 8001594:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001598:	6802      	ldr	r2, [r0, #0]
 800159a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800159c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80015a4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80015a6:	680b      	ldr	r3, [r1, #0]
 80015a8:	2b60      	cmp	r3, #96	; 0x60
 80015aa:	d040      	beq.n	800162e <HAL_TIM_ConfigClockSource+0xae>
 80015ac:	d822      	bhi.n	80015f4 <HAL_TIM_ConfigClockSource+0x74>
 80015ae:	2b40      	cmp	r3, #64	; 0x40
 80015b0:	d047      	beq.n	8001642 <HAL_TIM_ConfigClockSource+0xc2>
 80015b2:	d90b      	bls.n	80015cc <HAL_TIM_ConfigClockSource+0x4c>
 80015b4:	2b50      	cmp	r3, #80	; 0x50
 80015b6:	d10e      	bne.n	80015d6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80015b8:	68ca      	ldr	r2, [r1, #12]
 80015ba:	6849      	ldr	r1, [r1, #4]
 80015bc:	6800      	ldr	r0, [r0, #0]
 80015be:	f7ff ff11 	bl	80013e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80015c2:	2150      	movs	r1, #80	; 0x50
 80015c4:	6820      	ldr	r0, [r4, #0]
 80015c6:	f7ff ff32 	bl	800142e <TIM_ITRx_SetConfig>
      break;
 80015ca:	e004      	b.n	80015d6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	d00c      	beq.n	80015ea <HAL_TIM_ConfigClockSource+0x6a>
 80015d0:	d908      	bls.n	80015e4 <HAL_TIM_ConfigClockSource+0x64>
 80015d2:	2b30      	cmp	r3, #48	; 0x30
 80015d4:	d009      	beq.n	80015ea <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80015dc:	2000      	movs	r0, #0
 80015de:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80015e2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80015e4:	b10b      	cbz	r3, 80015ea <HAL_TIM_ConfigClockSource+0x6a>
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d1f5      	bne.n	80015d6 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80015ea:	4619      	mov	r1, r3
 80015ec:	6820      	ldr	r0, [r4, #0]
 80015ee:	f7ff ff1e 	bl	800142e <TIM_ITRx_SetConfig>
        break;
 80015f2:	e7f0      	b.n	80015d6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80015f4:	2b70      	cmp	r3, #112	; 0x70
 80015f6:	d00e      	beq.n	8001616 <HAL_TIM_ConfigClockSource+0x96>
 80015f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015fc:	d1eb      	bne.n	80015d6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 80015fe:	68cb      	ldr	r3, [r1, #12]
 8001600:	684a      	ldr	r2, [r1, #4]
 8001602:	6889      	ldr	r1, [r1, #8]
 8001604:	6800      	ldr	r0, [r0, #0]
 8001606:	f7ff ffaf 	bl	8001568 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800160a:	6822      	ldr	r2, [r4, #0]
 800160c:	6893      	ldr	r3, [r2, #8]
 800160e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001612:	6093      	str	r3, [r2, #8]
      break;
 8001614:	e7df      	b.n	80015d6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001616:	68cb      	ldr	r3, [r1, #12]
 8001618:	684a      	ldr	r2, [r1, #4]
 800161a:	6889      	ldr	r1, [r1, #8]
 800161c:	6800      	ldr	r0, [r0, #0]
 800161e:	f7ff ffa3 	bl	8001568 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001626:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800162a:	6093      	str	r3, [r2, #8]
      break;
 800162c:	e7d3      	b.n	80015d6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800162e:	68ca      	ldr	r2, [r1, #12]
 8001630:	6849      	ldr	r1, [r1, #4]
 8001632:	6800      	ldr	r0, [r0, #0]
 8001634:	f7ff fee8 	bl	8001408 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001638:	2160      	movs	r1, #96	; 0x60
 800163a:	6820      	ldr	r0, [r4, #0]
 800163c:	f7ff fef7 	bl	800142e <TIM_ITRx_SetConfig>
      break;
 8001640:	e7c9      	b.n	80015d6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001642:	68ca      	ldr	r2, [r1, #12]
 8001644:	6849      	ldr	r1, [r1, #4]
 8001646:	6800      	ldr	r0, [r0, #0]
 8001648:	f7ff fecc 	bl	80013e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	6820      	ldr	r0, [r4, #0]
 8001650:	f7ff feed 	bl	800142e <TIM_ITRx_SetConfig>
      break;
 8001654:	e7bf      	b.n	80015d6 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8001656:	2002      	movs	r0, #2
}
 8001658:	4770      	bx	lr
	...

0800165c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800165c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001660:	2b01      	cmp	r3, #1
 8001662:	d02c      	beq.n	80016be <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8001664:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8001666:	2301      	movs	r3, #1
 8001668:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800166c:	2302      	movs	r3, #2
 800166e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001672:	6803      	ldr	r3, [r0, #0]
 8001674:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001676:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001678:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800167c:	680a      	ldr	r2, [r1, #0]
 800167e:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001682:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001684:	6803      	ldr	r3, [r0, #0]
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d00a      	beq.n	80016a2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001690:	d007      	beq.n	80016a2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8001692:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001696:	4293      	cmp	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800169a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800169e:	4293      	cmp	r3, r2
 80016a0:	d104      	bne.n	80016ac <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80016a2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80016a6:	684a      	ldr	r2, [r1, #4]
 80016a8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80016aa:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80016b2:	2300      	movs	r3, #0
 80016b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80016b8:	4618      	mov	r0, r3
}
 80016ba:	bc10      	pop	{r4}
 80016bc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80016be:	2002      	movs	r0, #2
}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40012c00 	.word	0x40012c00

080016c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016c8:	b510      	push	{r4, lr}
 80016ca:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016cc:	6802      	ldr	r2, [r0, #0]
 80016ce:	6913      	ldr	r3, [r2, #16]
 80016d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016d4:	68c1      	ldr	r1, [r0, #12]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016da:	6883      	ldr	r3, [r0, #8]
 80016dc:	6902      	ldr	r2, [r0, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	6942      	ldr	r2, [r0, #20]
 80016e2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80016e4:	6801      	ldr	r1, [r0, #0]
 80016e6:	68cb      	ldr	r3, [r1, #12]
 80016e8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016ec:	f023 030c 	bic.w	r3, r3, #12
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016f4:	6802      	ldr	r2, [r0, #0]
 80016f6:	6953      	ldr	r3, [r2, #20]
 80016f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016fc:	6981      	ldr	r1, [r0, #24]
 80016fe:	430b      	orrs	r3, r1
 8001700:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001702:	6802      	ldr	r2, [r0, #0]
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <UART_SetConfig+0x8c>)
 8001706:	429a      	cmp	r2, r3
 8001708:	d020      	beq.n	800174c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800170a:	f7ff fe4b 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 800170e:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001710:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001714:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001718:	6863      	ldr	r3, [r4, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <UART_SetConfig+0x90>)
 8001722:	fba0 3102 	umull	r3, r1, r0, r2
 8001726:	0949      	lsrs	r1, r1, #5
 8001728:	2364      	movs	r3, #100	; 0x64
 800172a:	fb03 2311 	mls	r3, r3, r1, r2
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	3332      	adds	r3, #50	; 0x32
 8001732:	fba0 2303 	umull	r2, r3, r0, r3
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800173c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	6821      	ldr	r1, [r4, #0]
 8001746:	4413      	add	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800174a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800174c:	f7ff fe3a 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 8001750:	4602      	mov	r2, r0
 8001752:	e7dd      	b.n	8001710 <UART_SetConfig+0x48>
 8001754:	40013800 	.word	0x40013800
 8001758:	51eb851f 	.word	0x51eb851f

0800175c <HAL_UART_Init>:
  if (huart == NULL)
 800175c:	b358      	cbz	r0, 80017b6 <HAL_UART_Init+0x5a>
{
 800175e:	b510      	push	{r4, lr}
 8001760:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001762:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001766:	b30b      	cbz	r3, 80017ac <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001768:	2324      	movs	r3, #36	; 0x24
 800176a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800176e:	6822      	ldr	r2, [r4, #0]
 8001770:	68d3      	ldr	r3, [r2, #12]
 8001772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001776:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff ffa5 	bl	80016c8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800177e:	6822      	ldr	r2, [r4, #0]
 8001780:	6913      	ldr	r3, [r2, #16]
 8001782:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001786:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001788:	6822      	ldr	r2, [r4, #0]
 800178a:	6953      	ldr	r3, [r2, #20]
 800178c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001790:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	68d3      	ldr	r3, [r2, #12]
 8001796:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800179a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179c:	2000      	movs	r0, #0
 800179e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017a0:	2320      	movs	r3, #32
 80017a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80017aa:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80017ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80017b0:	f7ff f8a2 	bl	80008f8 <HAL_UART_MspInit>
 80017b4:	e7d8      	b.n	8001768 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80017b6:	2001      	movs	r0, #1
}
 80017b8:	4770      	bx	lr
	...

080017bc <__libc_init_array>:
 80017bc:	b570      	push	{r4, r5, r6, lr}
 80017be:	2600      	movs	r6, #0
 80017c0:	4d0c      	ldr	r5, [pc, #48]	; (80017f4 <__libc_init_array+0x38>)
 80017c2:	4c0d      	ldr	r4, [pc, #52]	; (80017f8 <__libc_init_array+0x3c>)
 80017c4:	1b64      	subs	r4, r4, r5
 80017c6:	10a4      	asrs	r4, r4, #2
 80017c8:	42a6      	cmp	r6, r4
 80017ca:	d109      	bne.n	80017e0 <__libc_init_array+0x24>
 80017cc:	f000 f822 	bl	8001814 <_init>
 80017d0:	2600      	movs	r6, #0
 80017d2:	4d0a      	ldr	r5, [pc, #40]	; (80017fc <__libc_init_array+0x40>)
 80017d4:	4c0a      	ldr	r4, [pc, #40]	; (8001800 <__libc_init_array+0x44>)
 80017d6:	1b64      	subs	r4, r4, r5
 80017d8:	10a4      	asrs	r4, r4, #2
 80017da:	42a6      	cmp	r6, r4
 80017dc:	d105      	bne.n	80017ea <__libc_init_array+0x2e>
 80017de:	bd70      	pop	{r4, r5, r6, pc}
 80017e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017e4:	4798      	blx	r3
 80017e6:	3601      	adds	r6, #1
 80017e8:	e7ee      	b.n	80017c8 <__libc_init_array+0xc>
 80017ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ee:	4798      	blx	r3
 80017f0:	3601      	adds	r6, #1
 80017f2:	e7f2      	b.n	80017da <__libc_init_array+0x1e>
 80017f4:	0800193c 	.word	0x0800193c
 80017f8:	0800193c 	.word	0x0800193c
 80017fc:	0800193c 	.word	0x0800193c
 8001800:	08001940 	.word	0x08001940

08001804 <memset>:
 8001804:	4603      	mov	r3, r0
 8001806:	4402      	add	r2, r0
 8001808:	4293      	cmp	r3, r2
 800180a:	d100      	bne.n	800180e <memset+0xa>
 800180c:	4770      	bx	lr
 800180e:	f803 1b01 	strb.w	r1, [r3], #1
 8001812:	e7f9      	b.n	8001808 <memset+0x4>

08001814 <_init>:
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001816:	bf00      	nop
 8001818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800181a:	bc08      	pop	{r3}
 800181c:	469e      	mov	lr, r3
 800181e:	4770      	bx	lr

08001820 <_fini>:
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001822:	bf00      	nop
 8001824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001826:	bc08      	pop	{r3}
 8001828:	469e      	mov	lr, r3
 800182a:	4770      	bx	lr


Trade_Spoofer_Gen3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000126c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001378  08001378  00011378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013a4  080013a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080013a4  080013a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013a4  080013a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013a4  080013a4  000113a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013a8  080013a8  000113a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080013ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  080013b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080013b8  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba89  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001840  00000000  00000000  0002babe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c87  00000000  00000000  0002e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6f8  00000000  00000000  0004551f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008636c  00000000  00000000  00053c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9f83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd8  00000000  00000000  000d9fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00009770  00000000  00000000  000dbcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001360 	.word	0x08001360

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001360 	.word	0x08001360

0800014c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800014c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000150:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	2400      	movs	r4, #0
 8000154:	9404      	str	r4, [sp, #16]
 8000156:	9405      	str	r4, [sp, #20]
 8000158:	9406      	str	r4, [sp, #24]
 800015a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800015c:	4b39      	ldr	r3, [pc, #228]	; (8000244 <MX_GPIO_Init+0xf8>)
 800015e:	699a      	ldr	r2, [r3, #24]
 8000160:	f042 0210 	orr.w	r2, r2, #16
 8000164:	619a      	str	r2, [r3, #24]
 8000166:	699a      	ldr	r2, [r3, #24]
 8000168:	f002 0210 	and.w	r2, r2, #16
 800016c:	9200      	str	r2, [sp, #0]
 800016e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	699a      	ldr	r2, [r3, #24]
 8000172:	f042 0220 	orr.w	r2, r2, #32
 8000176:	619a      	str	r2, [r3, #24]
 8000178:	699a      	ldr	r2, [r3, #24]
 800017a:	f002 0220 	and.w	r2, r2, #32
 800017e:	9201      	str	r2, [sp, #4]
 8000180:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000182:	699a      	ldr	r2, [r3, #24]
 8000184:	f042 0204 	orr.w	r2, r2, #4
 8000188:	619a      	str	r2, [r3, #24]
 800018a:	699a      	ldr	r2, [r3, #24]
 800018c:	f002 0204 	and.w	r2, r2, #4
 8000190:	9202      	str	r2, [sp, #8]
 8000192:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000194:	699a      	ldr	r2, [r3, #24]
 8000196:	f042 0208 	orr.w	r2, r2, #8
 800019a:	619a      	str	r2, [r3, #24]
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	f003 0308 	and.w	r3, r3, #8
 80001a2:	9303      	str	r3, [sp, #12]
 80001a4:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001a6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8000248 <MX_GPIO_Init+0xfc>
 80001aa:	2201      	movs	r2, #1
 80001ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b0:	4640      	mov	r0, r8
 80001b2:	f000 fb85 	bl	80008c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_Out_GPIO_Port, SD_Out_Pin, GPIO_PIN_RESET);
 80001b6:	f8df a094 	ldr.w	sl, [pc, #148]	; 800024c <MX_GPIO_Init+0x100>
 80001ba:	4622      	mov	r2, r4
 80001bc:	2180      	movs	r1, #128	; 0x80
 80001be:	4650      	mov	r0, sl
 80001c0:	f000 fb7e 	bl	80008c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|SO_Pin, GPIO_PIN_SET);
 80001c4:	4d22      	ldr	r5, [pc, #136]	; (8000250 <MX_GPIO_Init+0x104>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	21c0      	movs	r1, #192	; 0xc0
 80001ca:	4628      	mov	r0, r5
 80001cc:	f000 fb78 	bl	80008c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d6:	2701      	movs	r7, #1
 80001d8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001da:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001dc:	2602      	movs	r6, #2
 80001de:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001e0:	a904      	add	r1, sp, #16
 80001e2:	4640      	mov	r0, r8
 80001e4:	f000 fa5a 	bl	800069c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Out_Pin */
  GPIO_InitStruct.Pin = SD_Out_Pin;
 80001e8:	f04f 0980 	mov.w	r9, #128	; 0x80
 80001ec:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001f0:	f04f 0811 	mov.w	r8, #17
 80001f4:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001f8:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fa:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(SD_Out_GPIO_Port, &GPIO_InitStruct);
 80001fc:	a904      	add	r1, sp, #16
 80001fe:	4650      	mov	r0, sl
 8000200:	f000 fa4c 	bl	800069c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_In_Pin */
  GPIO_InitStruct.Pin = SD_In_Pin;
 8000204:	2320      	movs	r3, #32
 8000206:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000208:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800020a:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(SD_In_GPIO_Port, &GPIO_InitStruct);
 800020c:	a904      	add	r1, sp, #16
 800020e:	4628      	mov	r0, r5
 8000210:	f000 fa44 	bl	800069c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000214:	2340      	movs	r3, #64	; 0x40
 8000216:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000218:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000220:	a904      	add	r1, sp, #16
 8000222:	4628      	mov	r0, r5
 8000224:	f000 fa3a 	bl	800069c <HAL_GPIO_Init>

  /*Configure GPIO pin : SO_Pin */
  GPIO_InitStruct.Pin = SO_Pin;
 8000228:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800022c:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000230:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000232:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(SO_GPIO_Port, &GPIO_InitStruct);
 8000234:	a904      	add	r1, sp, #16
 8000236:	4628      	mov	r0, r5
 8000238:	f000 fa30 	bl	800069c <HAL_GPIO_Init>

}
 800023c:	b008      	add	sp, #32
 800023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	40011000 	.word	0x40011000
 800024c:	40010800 	.word	0x40010800
 8000250:	40010c00 	.word	0x40010c00

08000254 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000254:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000256:	e7fe      	b.n	8000256 <Error_Handler+0x2>

08000258 <MX_TIM1_Init>:
{
 8000258:	b500      	push	{lr}
 800025a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800025c:	2300      	movs	r3, #0
 800025e:	9302      	str	r3, [sp, #8]
 8000260:	9303      	str	r3, [sp, #12]
 8000262:	9304      	str	r3, [sp, #16]
 8000264:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	9301      	str	r3, [sp, #4]
  htim1.Instance = TIM1;
 800026a:	4813      	ldr	r0, [pc, #76]	; (80002b8 <MX_TIM1_Init+0x60>)
 800026c:	4a13      	ldr	r2, [pc, #76]	; (80002bc <MX_TIM1_Init+0x64>)
 800026e:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000270:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000272:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8000274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000278:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800027a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800027c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800027e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000280:	f000 feec 	bl	800105c <HAL_TIM_Base_Init>
 8000284:	b990      	cbnz	r0, 80002ac <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800028a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800028c:	a902      	add	r1, sp, #8
 800028e:	480a      	ldr	r0, [pc, #40]	; (80002b8 <MX_TIM1_Init+0x60>)
 8000290:	f000 ff1c 	bl	80010cc <HAL_TIM_ConfigClockSource>
 8000294:	b960      	cbnz	r0, 80002b0 <MX_TIM1_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000296:	2300      	movs	r3, #0
 8000298:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800029a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800029c:	4669      	mov	r1, sp
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <MX_TIM1_Init+0x60>)
 80002a0:	f000 ff82 	bl	80011a8 <HAL_TIMEx_MasterConfigSynchronization>
 80002a4:	b930      	cbnz	r0, 80002b4 <MX_TIM1_Init+0x5c>
}
 80002a6:	b007      	add	sp, #28
 80002a8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80002ac:	f7ff ffd2 	bl	8000254 <Error_Handler>
    Error_Handler();
 80002b0:	f7ff ffd0 	bl	8000254 <Error_Handler>
    Error_Handler();
 80002b4:	f7ff ffce 	bl	8000254 <Error_Handler>
 80002b8:	20000028 	.word	0x20000028
 80002bc:	40012c00 	.word	0x40012c00

080002c0 <MX_USART1_UART_Init>:
{
 80002c0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80002c2:	480a      	ldr	r0, [pc, #40]	; (80002ec <MX_USART1_UART_Init+0x2c>)
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <MX_USART1_UART_Init+0x30>)
 80002c6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80002c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80002cc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	2300      	movs	r3, #0
 80002d0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002d4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d6:	220c      	movs	r2, #12
 80002d8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002da:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002dc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002de:	f000 ffe3 	bl	80012a8 <HAL_UART_Init>
 80002e2:	b900      	cbnz	r0, 80002e6 <MX_USART1_UART_Init+0x26>
}
 80002e4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80002e6:	f7ff ffb5 	bl	8000254 <Error_Handler>
 80002ea:	bf00      	nop
 80002ec:	20000070 	.word	0x20000070
 80002f0:	40013800 	.word	0x40013800

080002f4 <SystemClock_Config>:
{
 80002f4:	b500      	push	{lr}
 80002f6:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f8:	2228      	movs	r2, #40	; 0x28
 80002fa:	2100      	movs	r1, #0
 80002fc:	a806      	add	r0, sp, #24
 80002fe:	f001 f827 	bl	8001350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000302:	2300      	movs	r3, #0
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	9302      	str	r3, [sp, #8]
 8000308:	9303      	str	r3, [sp, #12]
 800030a:	9304      	str	r3, [sp, #16]
 800030c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030e:	2201      	movs	r2, #1
 8000310:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	2202      	movs	r2, #2
 800031c:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000320:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000324:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	a806      	add	r0, sp, #24
 8000328:	f000 fae6 	bl	80008f8 <HAL_RCC_OscConfig>
 800032c:	b980      	cbnz	r0, 8000350 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2102      	movs	r1, #2
 8000334:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800033e:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000342:	a801      	add	r0, sp, #4
 8000344:	f000 fd18 	bl	8000d78 <HAL_RCC_ClockConfig>
 8000348:	b920      	cbnz	r0, 8000354 <SystemClock_Config+0x60>
}
 800034a:	b011      	add	sp, #68	; 0x44
 800034c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000350:	f7ff ff80 	bl	8000254 <Error_Handler>
    Error_Handler();
 8000354:	f7ff ff7e 	bl	8000254 <Error_Handler>

08000358 <main>:
{
 8000358:	b580      	push	{r7, lr}
  HAL_Init();
 800035a:	f000 f909 	bl	8000570 <HAL_Init>
  SystemClock_Config();
 800035e:	f7ff ffc9 	bl	80002f4 <SystemClock_Config>
  MX_GPIO_Init();
 8000362:	f7ff fef3 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000366:	f7ff ff77 	bl	8000258 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800036a:	f7ff ffa9 	bl	80002c0 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start(&htim1);
 800036e:	4815      	ldr	r0, [pc, #84]	; (80003c4 <main+0x6c>)
 8000370:	f000 fe0c 	bl	8000f8c <HAL_TIM_Base_Start>
	  GPIOC->BSRR = GPIO_PIN_13;
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <main+0x70>)
 8000376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800037a:	611a      	str	r2, [r3, #16]
	  GPIOB->BRR = GPIO_PIN_6;
 800037c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000380:	2240      	movs	r2, #64	; 0x40
 8000382:	615a      	str	r2, [r3, #20]
	  HAL_Delay(1000);
 8000384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000388:	f000 f916 	bl	80005b8 <HAL_Delay>
		  setPB5Output();
 800038c:	f000 f8c8 	bl	8000520 <setPB5Output>
		  GPIOB->BRR = GPIO_PIN_5;
 8000390:	4c0e      	ldr	r4, [pc, #56]	; (80003cc <main+0x74>)
 8000392:	2520      	movs	r5, #32
 8000394:	6165      	str	r5, [r4, #20]
		  LED_ON
 8000396:	4e0c      	ldr	r6, [pc, #48]	; (80003c8 <main+0x70>)
 8000398:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800039c:	6177      	str	r7, [r6, #20]
		  HAL_Delay(1000);
 800039e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a2:	f000 f909 	bl	80005b8 <HAL_Delay>
		  LED_OFF;
 80003a6:	6137      	str	r7, [r6, #16]
		  GPIOB->BSRR = GPIO_PIN_5;
 80003a8:	6125      	str	r5, [r4, #16]
		  setPB5Input();
 80003aa:	f000 f8b8 	bl	800051e <setPB5Input>
		  while(!(GPIOB->IDR & DataInPin));
 80003ae:	4b07      	ldr	r3, [pc, #28]	; (80003cc <main+0x74>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f013 0f20 	tst.w	r3, #32
 80003b6:	d0fa      	beq.n	80003ae <main+0x56>
		  HAL_Delay(1000);
 80003b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003bc:	f000 f8fc 	bl	80005b8 <HAL_Delay>
		  setPB5Output();
 80003c0:	e7e4      	b.n	800038c <main+0x34>
 80003c2:	bf00      	nop
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40011000 	.word	0x40011000
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <HAL_MspInit+0x3c>)
 80003d4:	699a      	ldr	r2, [r3, #24]
 80003d6:	f042 0201 	orr.w	r2, r2, #1
 80003da:	619a      	str	r2, [r3, #24]
 80003dc:	699a      	ldr	r2, [r3, #24]
 80003de:	f002 0201 	and.w	r2, r2, #1
 80003e2:	9200      	str	r2, [sp, #0]
 80003e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	69da      	ldr	r2, [r3, #28]
 80003e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003ec:	61da      	str	r2, [r3, #28]
 80003ee:	69db      	ldr	r3, [r3, #28]
 80003f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f8:	4a05      	ldr	r2, [pc, #20]	; (8000410 <HAL_MspInit+0x40>)
 80003fa:	6853      	ldr	r3, [r2, #4]
 80003fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000400:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	b002      	add	sp, #8
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000
 8000410:	40010000 	.word	0x40010000

08000414 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000414:	6802      	ldr	r2, [r0, #0]
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <HAL_TIM_Base_MspInit+0x28>)
 8000418:	429a      	cmp	r2, r3
 800041a:	d000      	beq.n	800041e <HAL_TIM_Base_MspInit+0xa>
 800041c:	4770      	bx	lr
{
 800041e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000420:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000424:	699a      	ldr	r2, [r3, #24]
 8000426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800042a:	619a      	str	r2, [r3, #24]
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000436:	b002      	add	sp, #8
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40012c00 	.word	0x40012c00

08000440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000440:	b510      	push	{r4, lr}
 8000442:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	2300      	movs	r3, #0
 8000446:	9302      	str	r3, [sp, #8]
 8000448:	9303      	str	r3, [sp, #12]
 800044a:	9304      	str	r3, [sp, #16]
 800044c:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 800044e:	6802      	ldr	r2, [r0, #0]
 8000450:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <HAL_UART_MspInit+0x70>)
 8000452:	429a      	cmp	r2, r3
 8000454:	d001      	beq.n	800045a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000456:	b006      	add	sp, #24
 8000458:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800045a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800045e:	699a      	ldr	r2, [r3, #24]
 8000460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000464:	619a      	str	r2, [r3, #24]
 8000466:	699a      	ldr	r2, [r3, #24]
 8000468:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800046c:	9200      	str	r2, [sp, #0]
 800046e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	699a      	ldr	r2, [r3, #24]
 8000472:	f042 0204 	orr.w	r2, r2, #4
 8000476:	619a      	str	r2, [r3, #24]
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0304 	and.w	r3, r3, #4
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000486:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000488:	2302      	movs	r3, #2
 800048a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800048c:	2303      	movs	r3, #3
 800048e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	4c08      	ldr	r4, [pc, #32]	; (80004b4 <HAL_UART_MspInit+0x74>)
 8000492:	a902      	add	r1, sp, #8
 8000494:	4620      	mov	r0, r4
 8000496:	f000 f901 	bl	800069c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800049a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a0:	2300      	movs	r3, #0
 80004a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a6:	a902      	add	r1, sp, #8
 80004a8:	4620      	mov	r0, r4
 80004aa:	f000 f8f7 	bl	800069c <HAL_GPIO_Init>
}
 80004ae:	e7d2      	b.n	8000456 <HAL_UART_MspInit+0x16>
 80004b0:	40013800 	.word	0x40013800
 80004b4:	40010800 	.word	0x40010800

080004b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <NMI_Handler>

080004ba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <HardFault_Handler>

080004bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <MemManage_Handler>

080004be <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <BusFault_Handler>

080004c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <UsageFault_Handler>

080004c2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c2:	4770      	bx	lr

080004c4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c4:	4770      	bx	lr

080004c6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c6:	4770      	bx	lr

080004c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ca:	f000 f863 	bl	8000594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ce:	bd08      	pop	{r3, pc}

080004d0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	4770      	bx	lr
	...

080004d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004d6:	490d      	ldr	r1, [pc, #52]	; (800050c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004dc:	e002      	b.n	80004e4 <LoopCopyDataInit>

080004de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e2:	3304      	adds	r3, #4

080004e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e8:	d3f9      	bcc.n	80004de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004ec:	4c0a      	ldr	r4, [pc, #40]	; (8000518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f0:	e001      	b.n	80004f6 <LoopFillZerobss>

080004f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f4:	3204      	adds	r2, #4

080004f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f8:	d3fb      	bcc.n	80004f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004fa:	f7ff ffe9 	bl	80004d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fe:	f000 ff03 	bl	8001308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000502:	f7ff ff29 	bl	8000358 <main>
  bx lr
 8000506:	4770      	bx	lr
  ldr r0, =_sdata
 8000508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800050c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000510:	080013ac 	.word	0x080013ac
  ldr r2, =_sbss
 8000514:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000518:	200000b8 	.word	0x200000b8

0800051c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800051c:	e7fe      	b.n	800051c <ADC1_2_IRQHandler>

0800051e <setPB5Input>:
//#include "RccConfig.h"

void setPB5Input()
{
	//GPIOB->MODER &= ~(GPIO_MODER_MODER5);
}
 800051e:	4770      	bx	lr

08000520 <setPB5Output>:

void setPB5Output()
{
	//GPIOB->MODER |= GPIO_MODER_MODER5_0;
}
 8000520:	4770      	bx	lr
	...

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b510      	push	{r4, lr}
 8000526:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_InitTick+0x40>)
 800052a:	7818      	ldrb	r0, [r3, #0]
 800052c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000530:	fbb3 f3f0 	udiv	r3, r3, r0
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <HAL_InitTick+0x44>)
 8000536:	6810      	ldr	r0, [r2, #0]
 8000538:	fbb0 f0f3 	udiv	r0, r0, r3
 800053c:	f000 f89a 	bl	8000674 <HAL_SYSTICK_Config>
 8000540:	b968      	cbnz	r0, 800055e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000542:	2c0f      	cmp	r4, #15
 8000544:	d901      	bls.n	800054a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000546:	2001      	movs	r0, #1
 8000548:	e00a      	b.n	8000560 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054a:	2200      	movs	r2, #0
 800054c:	4621      	mov	r1, r4
 800054e:	f04f 30ff 	mov.w	r0, #4294967295
 8000552:	f000 f857 	bl	8000604 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_InitTick+0x48>)
 8000558:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800055a:	2000      	movs	r0, #0
 800055c:	e000      	b.n	8000560 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800055e:	2001      	movs	r0, #1
}
 8000560:	bd10      	pop	{r4, pc}
 8000562:	bf00      	nop
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000
 800056c:	20000008 	.word	0x20000008

08000570 <HAL_Init>:
{
 8000570:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000572:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_Init+0x20>)
 8000574:	6813      	ldr	r3, [r2, #0]
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f82f 	bl	80005e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	200f      	movs	r0, #15
 8000584:	f7ff ffce 	bl	8000524 <HAL_InitTick>
  HAL_MspInit();
 8000588:	f7ff ff22 	bl	80003d0 <HAL_MspInit>
}
 800058c:	2000      	movs	r0, #0
 800058e:	bd08      	pop	{r3, pc}
 8000590:	40022000 	.word	0x40022000

08000594 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <HAL_IncTick+0x10>)
 8000596:	6811      	ldr	r1, [r2, #0]
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_IncTick+0x14>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	440b      	add	r3, r1
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200000b4 	.word	0x200000b4
 80005a8:	20000004 	.word	0x20000004

080005ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <HAL_GetTick+0x8>)
 80005ae:	6818      	ldr	r0, [r3, #0]
}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200000b4 	.word	0x200000b4

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b538      	push	{r3, r4, r5, lr}
 80005ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff fff6 	bl	80005ac <HAL_GetTick>
 80005c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80005c6:	d002      	beq.n	80005ce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_Delay+0x24>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ce:	f7ff ffed 	bl	80005ac <HAL_GetTick>
 80005d2:	1b40      	subs	r0, r0, r5
 80005d4:	42a0      	cmp	r0, r4
 80005d6:	d3fa      	bcc.n	80005ce <HAL_Delay+0x16>
  {
  }
}
 80005d8:	bd38      	pop	{r3, r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	20000004 	.word	0x20000004

080005e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005e2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005ec:	0200      	lsls	r0, r0, #8
 80005ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005fc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000604:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <HAL_NVIC_SetPriority+0x68>)
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060e:	f1c3 0c07 	rsb	ip, r3, #7
 8000612:	f1bc 0f04 	cmp.w	ip, #4
 8000616:	bf28      	it	cs
 8000618:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061c:	f103 0e04 	add.w	lr, r3, #4
 8000620:	f1be 0f06 	cmp.w	lr, #6
 8000624:	d918      	bls.n	8000658 <HAL_NVIC_SetPriority+0x54>
 8000626:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	f04f 3eff 	mov.w	lr, #4294967295
 800062c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000630:	ea21 010c 	bic.w	r1, r1, ip
 8000634:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000636:	fa0e f303 	lsl.w	r3, lr, r3
 800063a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000640:	2800      	cmp	r0, #0
 8000642:	db0b      	blt.n	800065c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	0109      	lsls	r1, r1, #4
 8000646:	b2c9      	uxtb	r1, r1
 8000648:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800064c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000650:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000654:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000658:	2300      	movs	r3, #0
 800065a:	e7e5      	b.n	8000628 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	f000 000f 	and.w	r0, r0, #15
 8000660:	0109      	lsls	r1, r1, #4
 8000662:	b2c9      	uxtb	r1, r1
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <HAL_NVIC_SetPriority+0x6c>)
 8000666:	5419      	strb	r1, [r3, r0]
 8000668:	e7f4      	b.n	8000654 <HAL_NVIC_SetPriority+0x50>
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00
 8000670:	e000ed14 	.word	0xe000ed14

08000674 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000674:	3801      	subs	r0, #1
 8000676:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800067a:	d20b      	bcs.n	8000694 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800067c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000680:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	4a05      	ldr	r2, [pc, #20]	; (8000698 <HAL_SYSTICK_Config+0x24>)
 8000684:	21f0      	movs	r1, #240	; 0xf0
 8000686:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800068a:	2000      	movs	r0, #0
 800068c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068e:	2207      	movs	r2, #7
 8000690:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000692:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000694:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006a0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80006a2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006a4:	e0a6      	b.n	80007f4 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006a6:	4d80      	ldr	r5, [pc, #512]	; (80008a8 <HAL_GPIO_Init+0x20c>)
 80006a8:	42aa      	cmp	r2, r5
 80006aa:	d010      	beq.n	80006ce <HAL_GPIO_Init+0x32>
 80006ac:	d907      	bls.n	80006be <HAL_GPIO_Init+0x22>
 80006ae:	4d7f      	ldr	r5, [pc, #508]	; (80008ac <HAL_GPIO_Init+0x210>)
 80006b0:	42aa      	cmp	r2, r5
 80006b2:	d00c      	beq.n	80006ce <HAL_GPIO_Init+0x32>
 80006b4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80006b8:	42aa      	cmp	r2, r5
 80006ba:	d008      	beq.n	80006ce <HAL_GPIO_Init+0x32>
 80006bc:	e013      	b.n	80006e6 <HAL_GPIO_Init+0x4a>
 80006be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80006c2:	42aa      	cmp	r2, r5
 80006c4:	d003      	beq.n	80006ce <HAL_GPIO_Init+0x32>
 80006c6:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 80006ca:	42aa      	cmp	r2, r5
 80006cc:	d107      	bne.n	80006de <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006ce:	688a      	ldr	r2, [r1, #8]
 80006d0:	2a00      	cmp	r2, #0
 80006d2:	d058      	beq.n	8000786 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006d4:	2a01      	cmp	r2, #1
 80006d6:	d051      	beq.n	800077c <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80006d8:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006da:	2408      	movs	r4, #8
 80006dc:	e003      	b.n	80006e6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80006de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80006e2:	42aa      	cmp	r2, r5
 80006e4:	d0f3      	beq.n	80006ce <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006e6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80006ea:	d84e      	bhi.n	800078a <HAL_GPIO_Init+0xee>
 80006ec:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80006ee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80006f2:	d84c      	bhi.n	800078e <HAL_GPIO_Init+0xf2>
 80006f4:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006f8:	6833      	ldr	r3, [r6, #0]
 80006fa:	250f      	movs	r5, #15
 80006fc:	4095      	lsls	r5, r2
 80006fe:	ea23 0305 	bic.w	r3, r3, r5
 8000702:	fa04 f202 	lsl.w	r2, r4, r2
 8000706:	4313      	orrs	r3, r2
 8000708:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800070a:	684b      	ldr	r3, [r1, #4]
 800070c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000710:	d06e      	beq.n	80007f0 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000712:	4b67      	ldr	r3, [pc, #412]	; (80008b0 <HAL_GPIO_Init+0x214>)
 8000714:	699a      	ldr	r2, [r3, #24]
 8000716:	f042 0201 	orr.w	r2, r2, #1
 800071a:	619a      	str	r2, [r3, #24]
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000726:	ea4f 029c 	mov.w	r2, ip, lsr #2
 800072a:	1c95      	adds	r5, r2, #2
 800072c:	4b61      	ldr	r3, [pc, #388]	; (80008b4 <HAL_GPIO_Init+0x218>)
 800072e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000732:	f00c 0303 	and.w	r3, ip, #3
 8000736:	009d      	lsls	r5, r3, #2
 8000738:	230f      	movs	r3, #15
 800073a:	40ab      	lsls	r3, r5
 800073c:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000740:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <HAL_GPIO_Init+0x21c>)
 8000742:	4298      	cmp	r0, r3
 8000744:	d029      	beq.n	800079a <HAL_GPIO_Init+0xfe>
 8000746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800074a:	4298      	cmp	r0, r3
 800074c:	f000 808e 	beq.w	800086c <HAL_GPIO_Init+0x1d0>
 8000750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000754:	4298      	cmp	r0, r3
 8000756:	f000 808b 	beq.w	8000870 <HAL_GPIO_Init+0x1d4>
 800075a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800075e:	4298      	cmp	r0, r3
 8000760:	d019      	beq.n	8000796 <HAL_GPIO_Init+0xfa>
 8000762:	2304      	movs	r3, #4
 8000764:	e01a      	b.n	800079c <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000766:	68cc      	ldr	r4, [r1, #12]
          break;
 8000768:	e7bd      	b.n	80006e6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800076a:	68cc      	ldr	r4, [r1, #12]
 800076c:	3404      	adds	r4, #4
          break;
 800076e:	e7ba      	b.n	80006e6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000770:	68cc      	ldr	r4, [r1, #12]
 8000772:	3408      	adds	r4, #8
          break;
 8000774:	e7b7      	b.n	80006e6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000776:	68cc      	ldr	r4, [r1, #12]
 8000778:	340c      	adds	r4, #12
          break;
 800077a:	e7b4      	b.n	80006e6 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 800077c:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800077e:	2408      	movs	r4, #8
 8000780:	e7b1      	b.n	80006e6 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000782:	2400      	movs	r4, #0
 8000784:	e7af      	b.n	80006e6 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000786:	2404      	movs	r4, #4
 8000788:	e7ad      	b.n	80006e6 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800078a:	1d06      	adds	r6, r0, #4
 800078c:	e7af      	b.n	80006ee <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800078e:	f1ac 0208 	sub.w	r2, ip, #8
 8000792:	0092      	lsls	r2, r2, #2
 8000794:	e7b0      	b.n	80006f8 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000796:	2303      	movs	r3, #3
 8000798:	e000      	b.n	800079c <HAL_GPIO_Init+0x100>
 800079a:	2300      	movs	r3, #0
 800079c:	40ab      	lsls	r3, r5
 800079e:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80007a0:	3202      	adds	r2, #2
 80007a2:	4d44      	ldr	r5, [pc, #272]	; (80008b4 <HAL_GPIO_Init+0x218>)
 80007a4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007a8:	684b      	ldr	r3, [r1, #4]
 80007aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80007ae:	d061      	beq.n	8000874 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80007b0:	4a42      	ldr	r2, [pc, #264]	; (80008bc <HAL_GPIO_Init+0x220>)
 80007b2:	6813      	ldr	r3, [r2, #0]
 80007b4:	ea43 030e 	orr.w	r3, r3, lr
 80007b8:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ba:	684b      	ldr	r3, [r1, #4]
 80007bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80007c0:	d05e      	beq.n	8000880 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80007c2:	4a3e      	ldr	r2, [pc, #248]	; (80008bc <HAL_GPIO_Init+0x220>)
 80007c4:	6853      	ldr	r3, [r2, #4]
 80007c6:	ea43 030e 	orr.w	r3, r3, lr
 80007ca:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007cc:	684b      	ldr	r3, [r1, #4]
 80007ce:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d2:	d05b      	beq.n	800088c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80007d4:	4a39      	ldr	r2, [pc, #228]	; (80008bc <HAL_GPIO_Init+0x220>)
 80007d6:	6893      	ldr	r3, [r2, #8]
 80007d8:	ea43 030e 	orr.w	r3, r3, lr
 80007dc:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007de:	684b      	ldr	r3, [r1, #4]
 80007e0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80007e4:	d058      	beq.n	8000898 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80007e6:	4a35      	ldr	r2, [pc, #212]	; (80008bc <HAL_GPIO_Init+0x220>)
 80007e8:	68d3      	ldr	r3, [r2, #12]
 80007ea:	ea43 030e 	orr.w	r3, r3, lr
 80007ee:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80007f0:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f4:	680a      	ldr	r2, [r1, #0]
 80007f6:	fa32 f30c 	lsrs.w	r3, r2, ip
 80007fa:	d053      	beq.n	80008a4 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 80007fc:	2301      	movs	r3, #1
 80007fe:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000802:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8000806:	ea33 0202 	bics.w	r2, r3, r2
 800080a:	d1f1      	bne.n	80007f0 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 800080c:	684a      	ldr	r2, [r1, #4]
 800080e:	2a12      	cmp	r2, #18
 8000810:	f63f af49 	bhi.w	80006a6 <HAL_GPIO_Init+0xa>
 8000814:	2a12      	cmp	r2, #18
 8000816:	f63f af66 	bhi.w	80006e6 <HAL_GPIO_Init+0x4a>
 800081a:	a501      	add	r5, pc, #4	; (adr r5, 8000820 <HAL_GPIO_Init+0x184>)
 800081c:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8000820:	080006cf 	.word	0x080006cf
 8000824:	08000767 	.word	0x08000767
 8000828:	08000771 	.word	0x08000771
 800082c:	08000783 	.word	0x08000783
 8000830:	080006e7 	.word	0x080006e7
 8000834:	080006e7 	.word	0x080006e7
 8000838:	080006e7 	.word	0x080006e7
 800083c:	080006e7 	.word	0x080006e7
 8000840:	080006e7 	.word	0x080006e7
 8000844:	080006e7 	.word	0x080006e7
 8000848:	080006e7 	.word	0x080006e7
 800084c:	080006e7 	.word	0x080006e7
 8000850:	080006e7 	.word	0x080006e7
 8000854:	080006e7 	.word	0x080006e7
 8000858:	080006e7 	.word	0x080006e7
 800085c:	080006e7 	.word	0x080006e7
 8000860:	080006e7 	.word	0x080006e7
 8000864:	0800076b 	.word	0x0800076b
 8000868:	08000777 	.word	0x08000777
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800086c:	2301      	movs	r3, #1
 800086e:	e795      	b.n	800079c <HAL_GPIO_Init+0x100>
 8000870:	2302      	movs	r3, #2
 8000872:	e793      	b.n	800079c <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000874:	4a11      	ldr	r2, [pc, #68]	; (80008bc <HAL_GPIO_Init+0x220>)
 8000876:	6813      	ldr	r3, [r2, #0]
 8000878:	ea23 030e 	bic.w	r3, r3, lr
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	e79c      	b.n	80007ba <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000880:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_GPIO_Init+0x220>)
 8000882:	6853      	ldr	r3, [r2, #4]
 8000884:	ea23 030e 	bic.w	r3, r3, lr
 8000888:	6053      	str	r3, [r2, #4]
 800088a:	e79f      	b.n	80007cc <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <HAL_GPIO_Init+0x220>)
 800088e:	6893      	ldr	r3, [r2, #8]
 8000890:	ea23 030e 	bic.w	r3, r3, lr
 8000894:	6093      	str	r3, [r2, #8]
 8000896:	e7a2      	b.n	80007de <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_GPIO_Init+0x220>)
 800089a:	68d3      	ldr	r3, [r2, #12]
 800089c:	ea23 030e 	bic.w	r3, r3, lr
 80008a0:	60d3      	str	r3, [r2, #12]
 80008a2:	e7a5      	b.n	80007f0 <HAL_GPIO_Init+0x154>
  }
}
 80008a4:	b002      	add	sp, #8
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	10220000 	.word	0x10220000
 80008ac:	10310000 	.word	0x10310000
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010000 	.word	0x40010000
 80008b8:	40010800 	.word	0x40010800
 80008bc:	40010400 	.word	0x40010400

080008c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80008c0:	b10a      	cbz	r2, 80008c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008c2:	6101      	str	r1, [r0, #16]
 80008c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008c6:	0409      	lsls	r1, r1, #16
 80008c8:	6101      	str	r1, [r0, #16]
  }
}
 80008ca:	4770      	bx	lr

080008cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80008cc:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <RCC_Delay+0x24>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <RCC_Delay+0x28>)
 80008d4:	fba2 2303 	umull	r2, r3, r2, r3
 80008d8:	0a5b      	lsrs	r3, r3, #9
 80008da:	fb00 f303 	mul.w	r3, r0, r3
 80008de:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80008e0:	bf00      	nop
  }
  while (Delay --);
 80008e2:	9b01      	ldr	r3, [sp, #4]
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	9201      	str	r2, [sp, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f9      	bne.n	80008e0 <RCC_Delay+0x14>
}
 80008ec:	b002      	add	sp, #8
 80008ee:	4770      	bx	lr
 80008f0:	20000000 	.word	0x20000000
 80008f4:	10624dd3 	.word	0x10624dd3

080008f8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80008f8:	2800      	cmp	r0, #0
 80008fa:	f000 81f1 	beq.w	8000ce0 <HAL_RCC_OscConfig+0x3e8>
{
 80008fe:	b570      	push	{r4, r5, r6, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000904:	6803      	ldr	r3, [r0, #0]
 8000906:	f013 0f01 	tst.w	r3, #1
 800090a:	d02c      	beq.n	8000966 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800090c:	4b99      	ldr	r3, [pc, #612]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f003 030c 	and.w	r3, r3, #12
 8000914:	2b04      	cmp	r3, #4
 8000916:	d01d      	beq.n	8000954 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000918:	4b96      	ldr	r3, [pc, #600]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 030c 	and.w	r3, r3, #12
 8000920:	2b08      	cmp	r3, #8
 8000922:	d012      	beq.n	800094a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000924:	6863      	ldr	r3, [r4, #4]
 8000926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800092a:	d041      	beq.n	80009b0 <HAL_RCC_OscConfig+0xb8>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d155      	bne.n	80009dc <HAL_RCC_OscConfig+0xe4>
 8000930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000934:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e037      	b.n	80009ba <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800094a:	4b8a      	ldr	r3, [pc, #552]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000952:	d0e7      	beq.n	8000924 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000954:	4b87      	ldr	r3, [pc, #540]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800095c:	d003      	beq.n	8000966 <HAL_RCC_OscConfig+0x6e>
 800095e:	6863      	ldr	r3, [r4, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	f000 81bf 	beq.w	8000ce4 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	f013 0f02 	tst.w	r3, #2
 800096c:	d075      	beq.n	8000a5a <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800096e:	4b81      	ldr	r3, [pc, #516]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f013 0f0c 	tst.w	r3, #12
 8000976:	d05f      	beq.n	8000a38 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000978:	4b7e      	ldr	r3, [pc, #504]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 030c 	and.w	r3, r3, #12
 8000980:	2b08      	cmp	r3, #8
 8000982:	d054      	beq.n	8000a2e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000984:	6923      	ldr	r3, [r4, #16]
 8000986:	2b00      	cmp	r3, #0
 8000988:	f000 808a 	beq.w	8000aa0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 800098c:	4b7a      	ldr	r3, [pc, #488]	; (8000b78 <HAL_RCC_OscConfig+0x280>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000992:	f7ff fe0b 	bl	80005ac <HAL_GetTick>
 8000996:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000998:	4b76      	ldr	r3, [pc, #472]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f013 0f02 	tst.w	r3, #2
 80009a0:	d175      	bne.n	8000a8e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009a2:	f7ff fe03 	bl	80005ac <HAL_GetTick>
 80009a6:	1b40      	subs	r0, r0, r5
 80009a8:	2802      	cmp	r0, #2
 80009aa:	d9f5      	bls.n	8000998 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80009ac:	2003      	movs	r0, #3
 80009ae:	e19e      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b0:	4a70      	ldr	r2, [pc, #448]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 80009b2:	6813      	ldr	r3, [r2, #0]
 80009b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009ba:	6863      	ldr	r3, [r4, #4]
 80009bc:	b343      	cbz	r3, 8000a10 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80009be:	f7ff fdf5 	bl	80005ac <HAL_GetTick>
 80009c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009c4:	4b6b      	ldr	r3, [pc, #428]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80009cc:	d1cb      	bne.n	8000966 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009ce:	f7ff fded 	bl	80005ac <HAL_GetTick>
 80009d2:	1b40      	subs	r0, r0, r5
 80009d4:	2864      	cmp	r0, #100	; 0x64
 80009d6:	d9f5      	bls.n	80009c4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80009d8:	2003      	movs	r0, #3
 80009da:	e188      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009e0:	d009      	beq.n	80009f6 <HAL_RCC_OscConfig+0xfe>
 80009e2:	4b64      	ldr	r3, [pc, #400]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	e7e1      	b.n	80009ba <HAL_RCC_OscConfig+0xc2>
 80009f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009fa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	e7d4      	b.n	80009ba <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000a10:	f7ff fdcc 	bl	80005ac <HAL_GetTick>
 8000a14:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a16:	4b57      	ldr	r3, [pc, #348]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a1e:	d0a2      	beq.n	8000966 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a20:	f7ff fdc4 	bl	80005ac <HAL_GetTick>
 8000a24:	1b40      	subs	r0, r0, r5
 8000a26:	2864      	cmp	r0, #100	; 0x64
 8000a28:	d9f5      	bls.n	8000a16 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	e15f      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a2e:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000a36:	d1a5      	bne.n	8000984 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a38:	4b4e      	ldr	r3, [pc, #312]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f013 0f02 	tst.w	r3, #2
 8000a40:	d003      	beq.n	8000a4a <HAL_RCC_OscConfig+0x152>
 8000a42:	6923      	ldr	r3, [r4, #16]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	f040 814f 	bne.w	8000ce8 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a4a:	4a4a      	ldr	r2, [pc, #296]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000a4c:	6813      	ldr	r3, [r2, #0]
 8000a4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a52:	6961      	ldr	r1, [r4, #20]
 8000a54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a58:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	f013 0f08 	tst.w	r3, #8
 8000a60:	d033      	beq.n	8000aca <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a62:	69a3      	ldr	r3, [r4, #24]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d05c      	beq.n	8000b22 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8000a68:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <HAL_RCC_OscConfig+0x280>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000a70:	f7ff fd9c 	bl	80005ac <HAL_GetTick>
 8000a74:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a76:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	f013 0f02 	tst.w	r3, #2
 8000a7e:	d121      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a80:	f7ff fd94 	bl	80005ac <HAL_GetTick>
 8000a84:	1b40      	subs	r0, r0, r5
 8000a86:	2802      	cmp	r0, #2
 8000a88:	d9f5      	bls.n	8000a76 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	e12f      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a8e:	4a39      	ldr	r2, [pc, #228]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a96:	6961      	ldr	r1, [r4, #20]
 8000a98:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	e7dc      	b.n	8000a5a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8000aa0:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <HAL_RCC_OscConfig+0x280>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aa6:	f7ff fd81 	bl	80005ac <HAL_GetTick>
 8000aaa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aac:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f013 0f02 	tst.w	r3, #2
 8000ab4:	d0d1      	beq.n	8000a5a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ab6:	f7ff fd79 	bl	80005ac <HAL_GetTick>
 8000aba:	1b40      	subs	r0, r0, r5
 8000abc:	2802      	cmp	r0, #2
 8000abe:	d9f5      	bls.n	8000aac <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	e114      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff ff01 	bl	80008cc <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	f013 0f04 	tst.w	r3, #4
 8000ad0:	f000 8096 	beq.w	8000c00 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000adc:	d134      	bne.n	8000b48 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000ae0:	69da      	ldr	r2, [r3, #28]
 8000ae2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ae6:	61da      	str	r2, [r3, #28]
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000af2:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HAL_RCC_OscConfig+0x284>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000afc:	d026      	beq.n	8000b4c <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000afe:	68e3      	ldr	r3, [r4, #12]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d03d      	beq.n	8000b80 <HAL_RCC_OscConfig+0x288>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d153      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x2b8>
 8000b08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b0c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000b10:	6a1a      	ldr	r2, [r3, #32]
 8000b12:	f022 0201 	bic.w	r2, r2, #1
 8000b16:	621a      	str	r2, [r3, #32]
 8000b18:	6a1a      	ldr	r2, [r3, #32]
 8000b1a:	f022 0204 	bic.w	r2, r2, #4
 8000b1e:	621a      	str	r2, [r3, #32]
 8000b20:	e033      	b.n	8000b8a <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_RCC_OscConfig+0x280>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000b2a:	f7ff fd3f 	bl	80005ac <HAL_GetTick>
 8000b2e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_RCC_OscConfig+0x27c>)
 8000b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b34:	f013 0f02 	tst.w	r3, #2
 8000b38:	d0c7      	beq.n	8000aca <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b3a:	f7ff fd37 	bl	80005ac <HAL_GetTick>
 8000b3e:	1b40      	subs	r0, r0, r5
 8000b40:	2802      	cmp	r0, #2
 8000b42:	d9f5      	bls.n	8000b30 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8000b44:	2003      	movs	r0, #3
 8000b46:	e0d2      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8000b48:	2500      	movs	r5, #0
 8000b4a:	e7d3      	b.n	8000af4 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <HAL_RCC_OscConfig+0x284>)
 8000b4e:	6813      	ldr	r3, [r2, #0]
 8000b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b54:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000b56:	f7ff fd29 	bl	80005ac <HAL_GetTick>
 8000b5a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <HAL_RCC_OscConfig+0x284>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b64:	d1cb      	bne.n	8000afe <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b66:	f7ff fd21 	bl	80005ac <HAL_GetTick>
 8000b6a:	1b80      	subs	r0, r0, r6
 8000b6c:	2864      	cmp	r0, #100	; 0x64
 8000b6e:	d9f5      	bls.n	8000b5c <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8000b70:	2003      	movs	r0, #3
 8000b72:	e0bc      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
 8000b74:	40021000 	.word	0x40021000
 8000b78:	42420000 	.word	0x42420000
 8000b7c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b80:	4a5f      	ldr	r2, [pc, #380]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000b82:	6a13      	ldr	r3, [r2, #32]
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b8a:	68e3      	ldr	r3, [r4, #12]
 8000b8c:	b333      	cbz	r3, 8000bdc <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000b8e:	f7ff fd0d 	bl	80005ac <HAL_GetTick>
 8000b92:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b94:	4b5a      	ldr	r3, [pc, #360]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	f013 0f02 	tst.w	r3, #2
 8000b9c:	d12f      	bne.n	8000bfe <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b9e:	f7ff fd05 	bl	80005ac <HAL_GetTick>
 8000ba2:	1b80      	subs	r0, r0, r6
 8000ba4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	d9f3      	bls.n	8000b94 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8000bac:	2003      	movs	r0, #3
 8000bae:	e09e      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bb0:	2b05      	cmp	r3, #5
 8000bb2:	d009      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x2d0>
 8000bb4:	4b52      	ldr	r3, [pc, #328]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000bb6:	6a1a      	ldr	r2, [r3, #32]
 8000bb8:	f022 0201 	bic.w	r2, r2, #1
 8000bbc:	621a      	str	r2, [r3, #32]
 8000bbe:	6a1a      	ldr	r2, [r3, #32]
 8000bc0:	f022 0204 	bic.w	r2, r2, #4
 8000bc4:	621a      	str	r2, [r3, #32]
 8000bc6:	e7e0      	b.n	8000b8a <HAL_RCC_OscConfig+0x292>
 8000bc8:	4b4d      	ldr	r3, [pc, #308]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000bca:	6a1a      	ldr	r2, [r3, #32]
 8000bcc:	f042 0204 	orr.w	r2, r2, #4
 8000bd0:	621a      	str	r2, [r3, #32]
 8000bd2:	6a1a      	ldr	r2, [r3, #32]
 8000bd4:	f042 0201 	orr.w	r2, r2, #1
 8000bd8:	621a      	str	r2, [r3, #32]
 8000bda:	e7d6      	b.n	8000b8a <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8000bdc:	f7ff fce6 	bl	80005ac <HAL_GetTick>
 8000be0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be2:	4b47      	ldr	r3, [pc, #284]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	f013 0f02 	tst.w	r3, #2
 8000bea:	d008      	beq.n	8000bfe <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bec:	f7ff fcde 	bl	80005ac <HAL_GetTick>
 8000bf0:	1b80      	subs	r0, r0, r6
 8000bf2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bf6:	4298      	cmp	r0, r3
 8000bf8:	d9f3      	bls.n	8000be2 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	e077      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8000bfe:	b9e5      	cbnz	r5, 8000c3a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c00:	69e3      	ldr	r3, [r4, #28]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d072      	beq.n	8000cec <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c06:	4a3e      	ldr	r2, [pc, #248]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000c08:	6852      	ldr	r2, [r2, #4]
 8000c0a:	f002 020c 	and.w	r2, r2, #12
 8000c0e:	2a08      	cmp	r2, #8
 8000c10:	d056      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d017      	beq.n	8000c46 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000c16:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <HAL_RCC_OscConfig+0x40c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fcc6 	bl	80005ac <HAL_GetTick>
 8000c20:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c22:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c2a:	d047      	beq.n	8000cbc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c2c:	f7ff fcbe 	bl	80005ac <HAL_GetTick>
 8000c30:	1b00      	subs	r0, r0, r4
 8000c32:	2802      	cmp	r0, #2
 8000c34:	d9f5      	bls.n	8000c22 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8000c36:	2003      	movs	r0, #3
 8000c38:	e059      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c3a:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000c3c:	69d3      	ldr	r3, [r2, #28]
 8000c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c42:	61d3      	str	r3, [r2, #28]
 8000c44:	e7dc      	b.n	8000c00 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8000c46:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <HAL_RCC_OscConfig+0x40c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000c4c:	f7ff fcae 	bl	80005ac <HAL_GetTick>
 8000c50:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c5a:	d006      	beq.n	8000c6a <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c5c:	f7ff fca6 	bl	80005ac <HAL_GetTick>
 8000c60:	1b40      	subs	r0, r0, r5
 8000c62:	2802      	cmp	r0, #2
 8000c64:	d9f5      	bls.n	8000c52 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000c66:	2003      	movs	r0, #3
 8000c68:	e041      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c6a:	6a23      	ldr	r3, [r4, #32]
 8000c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c70:	d01a      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c72:	4923      	ldr	r1, [pc, #140]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000c74:	684b      	ldr	r3, [r1, #4]
 8000c76:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000c7a:	6a22      	ldr	r2, [r4, #32]
 8000c7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000c7e:	4302      	orrs	r2, r0
 8000c80:	4313      	orrs	r3, r2
 8000c82:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <HAL_RCC_OscConfig+0x40c>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000c8a:	f7ff fc8f 	bl	80005ac <HAL_GetTick>
 8000c8e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c98:	d10e      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c9a:	f7ff fc87 	bl	80005ac <HAL_GetTick>
 8000c9e:	1b00      	subs	r0, r0, r4
 8000ca0:	2802      	cmp	r0, #2
 8000ca2:	d9f5      	bls.n	8000c90 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	e022      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ca8:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000caa:	6853      	ldr	r3, [r2, #4]
 8000cac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000cb0:	68a1      	ldr	r1, [r4, #8]
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	6053      	str	r3, [r2, #4]
 8000cb6:	e7dc      	b.n	8000c72 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e018      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	e016      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d016      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_RCC_OscConfig+0x408>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cc8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000ccc:	6a22      	ldr	r2, [r4, #32]
 8000cce:	4291      	cmp	r1, r2
 8000cd0:	d111      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000cd2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000cd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d10e      	bne.n	8000cfa <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8000cdc:	2000      	movs	r0, #0
 8000cde:	e006      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8000ce0:	2001      	movs	r0, #1
}
 8000ce2:	4770      	bx	lr
        return HAL_ERROR;
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	e002      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e000      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8000cec:	2000      	movs	r0, #0
}
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	e7fb      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	e7f9      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	e7f7      	b.n	8000cee <HAL_RCC_OscConfig+0x3f6>
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	42420000 	.word	0x42420000

08000d08 <HAL_RCC_GetSysClockFreq>:
{
 8000d08:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <HAL_RCC_GetSysClockFreq+0x60>)
 8000d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d0e:	f10d 0c18 	add.w	ip, sp, #24
 8000d12:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d16:	f240 2301 	movw	r3, #513	; 0x201
 8000d1a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HAL_RCC_GetSysClockFreq+0x64>)
 8000d20:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d22:	f003 020c 	and.w	r2, r3, #12
 8000d26:	2a08      	cmp	r2, #8
 8000d28:	d002      	beq.n	8000d30 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8000d2a:	4811      	ldr	r0, [pc, #68]	; (8000d70 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000d2c:	b006      	add	sp, #24
 8000d2e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d30:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000d34:	3218      	adds	r2, #24
 8000d36:	446a      	add	r2, sp
 8000d38:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d40:	d00d      	beq.n	8000d5e <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_RCC_GetSysClockFreq+0x64>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	446b      	add	r3, sp
 8000d4e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d52:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_RCC_GetSysClockFreq+0x68>)
 8000d54:	fb02 f000 	mul.w	r0, r2, r0
 8000d58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d5c:	e7e6      	b.n	8000d2c <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000d60:	fb03 f000 	mul.w	r0, r3, r0
 8000d64:	e7e2      	b.n	8000d2c <HAL_RCC_GetSysClockFreq+0x24>
 8000d66:	bf00      	nop
 8000d68:	08001390 	.word	0x08001390
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	007a1200 	.word	0x007a1200
 8000d74:	003d0900 	.word	0x003d0900

08000d78 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	f000 80a0 	beq.w	8000ebe <HAL_RCC_ClockConfig+0x146>
{
 8000d7e:	b570      	push	{r4, r5, r6, lr}
 8000d80:	460d      	mov	r5, r1
 8000d82:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d84:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <HAL_RCC_ClockConfig+0x158>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d20b      	bcs.n	8000da8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d90:	4a4f      	ldr	r2, [pc, #316]	; (8000ed0 <HAL_RCC_ClockConfig+0x158>)
 8000d92:	6813      	ldr	r3, [r2, #0]
 8000d94:	f023 0307 	bic.w	r3, r3, #7
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d9c:	6813      	ldr	r3, [r2, #0]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	428b      	cmp	r3, r1
 8000da4:	f040 808d 	bne.w	8000ec2 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	f013 0f02 	tst.w	r3, #2
 8000dae:	d017      	beq.n	8000de0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000db0:	f013 0f04 	tst.w	r3, #4
 8000db4:	d004      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000db6:	4a47      	ldr	r2, [pc, #284]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000db8:	6853      	ldr	r3, [r2, #4]
 8000dba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000dbe:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	f013 0f08 	tst.w	r3, #8
 8000dc6:	d004      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000dc8:	4a42      	ldr	r2, [pc, #264]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000dca:	6853      	ldr	r3, [r2, #4]
 8000dcc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000dd0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dd2:	4a40      	ldr	r2, [pc, #256]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000dd4:	6853      	ldr	r3, [r2, #4]
 8000dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dda:	68a1      	ldr	r1, [r4, #8]
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	f013 0f01 	tst.w	r3, #1
 8000de6:	d031      	beq.n	8000e4c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000de8:	6863      	ldr	r3, [r4, #4]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d020      	beq.n	8000e30 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d025      	beq.n	8000e3e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df2:	4a38      	ldr	r2, [pc, #224]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000df4:	6812      	ldr	r2, [r2, #0]
 8000df6:	f012 0f02 	tst.w	r2, #2
 8000dfa:	d064      	beq.n	8000ec6 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dfc:	4935      	ldr	r1, [pc, #212]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000dfe:	684a      	ldr	r2, [r1, #4]
 8000e00:	f022 0203 	bic.w	r2, r2, #3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000e08:	f7ff fbd0 	bl	80005ac <HAL_GetTick>
 8000e0c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	6862      	ldr	r2, [r4, #4]
 8000e18:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e1c:	d016      	beq.n	8000e4c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e1e:	f7ff fbc5 	bl	80005ac <HAL_GetTick>
 8000e22:	1b80      	subs	r0, r0, r6
 8000e24:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e28:	4298      	cmp	r0, r3
 8000e2a:	d9f0      	bls.n	8000e0e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	e045      	b.n	8000ebc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e30:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000e38:	d1e0      	bne.n	8000dfc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	e03e      	b.n	8000ebc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e3e:	4a25      	ldr	r2, [pc, #148]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000e40:	6812      	ldr	r2, [r2, #0]
 8000e42:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000e46:	d1d9      	bne.n	8000dfc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8000e48:	2001      	movs	r0, #1
 8000e4a:	e037      	b.n	8000ebc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_RCC_ClockConfig+0x158>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	42ab      	cmp	r3, r5
 8000e56:	d90a      	bls.n	8000e6e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_RCC_ClockConfig+0x158>)
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	f023 0307 	bic.w	r3, r3, #7
 8000e60:	432b      	orrs	r3, r5
 8000e62:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e64:	6813      	ldr	r3, [r2, #0]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	42ab      	cmp	r3, r5
 8000e6c:	d12d      	bne.n	8000eca <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	f013 0f04 	tst.w	r3, #4
 8000e74:	d006      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e76:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000e78:	6853      	ldr	r3, [r2, #4]
 8000e7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e7e:	68e1      	ldr	r1, [r4, #12]
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	f013 0f08 	tst.w	r3, #8
 8000e8a:	d007      	beq.n	8000e9c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e8c:	4a11      	ldr	r2, [pc, #68]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000e8e:	6853      	ldr	r3, [r2, #4]
 8000e90:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e94:	6921      	ldr	r1, [r4, #16]
 8000e96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e9a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e9c:	f7ff ff34 	bl	8000d08 <HAL_RCC_GetSysClockFreq>
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_RCC_ClockConfig+0x15c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_RCC_ClockConfig+0x160>)
 8000eaa:	5cd3      	ldrb	r3, [r2, r3]
 8000eac:	40d8      	lsrs	r0, r3
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_RCC_ClockConfig+0x164>)
 8000eb0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_RCC_ClockConfig+0x168>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	f7ff fb35 	bl	8000524 <HAL_InitTick>
  return HAL_OK;
 8000eba:	2000      	movs	r0, #0
}
 8000ebc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000ebe:	2001      	movs	r0, #1
}
 8000ec0:	4770      	bx	lr
    return HAL_ERROR;
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	e7fa      	b.n	8000ebc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e7f8      	b.n	8000ebc <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8000eca:	2001      	movs	r0, #1
 8000ecc:	e7f6      	b.n	8000ebc <HAL_RCC_ClockConfig+0x144>
 8000ece:	bf00      	nop
 8000ed0:	40022000 	.word	0x40022000
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	08001378 	.word	0x08001378
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <HAL_RCC_GetHCLKFreq>:
}
 8000ee4:	4b01      	ldr	r3, [pc, #4]	; (8000eec <HAL_RCC_GetHCLKFreq+0x8>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000

08000ef0 <HAL_RCC_GetPCLK1Freq>:
{
 8000ef0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ef2:	f7ff fff7 	bl	8000ee4 <HAL_RCC_GetHCLKFreq>
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000efe:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f00:	5cd3      	ldrb	r3, [r2, r3]
}
 8000f02:	40d8      	lsrs	r0, r3
 8000f04:	bd08      	pop	{r3, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	08001388 	.word	0x08001388

08000f10 <HAL_RCC_GetPCLK2Freq>:
{
 8000f10:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f12:	f7ff ffe7 	bl	8000ee4 <HAL_RCC_GetHCLKFreq>
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000f1e:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f20:	5cd3      	ldrb	r3, [r2, r3]
}
 8000f22:	40d8      	lsrs	r0, r3
 8000f24:	bd08      	pop	{r3, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	08001388 	.word	0x08001388

08000f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000f30:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000f32:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f34:	6a04      	ldr	r4, [r0, #32]
 8000f36:	f024 0401 	bic.w	r4, r4, #1
 8000f3a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f3c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f3e:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f42:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f46:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8000f4a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f4c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f4e:	6203      	str	r3, [r0, #32]
}
 8000f50:	bc10      	pop	{r4}
 8000f52:	4770      	bx	lr

08000f54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000f54:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f56:	6a04      	ldr	r4, [r0, #32]
 8000f58:	f024 0410 	bic.w	r4, r4, #16
 8000f5c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f5e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000f60:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f62:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f66:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f6e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000f72:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f74:	6203      	str	r3, [r0, #32]
}
 8000f76:	bc10      	pop	{r4}
 8000f78:	4770      	bx	lr

08000f7a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8000f7a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000f80:	430b      	orrs	r3, r1
 8000f82:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000f86:	6083      	str	r3, [r0, #8]
}
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8000f8c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d122      	bne.n	8000fdc <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000f9c:	6803      	ldr	r3, [r0, #0]
 8000f9e:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_TIM_Base_Start+0x58>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d010      	beq.n	8000fc6 <HAL_TIM_Base_Start+0x3a>
 8000fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_TIM_Base_Start+0x3a>
 8000faa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d009      	beq.n	8000fc6 <HAL_TIM_Base_Start+0x3a>
 8000fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d005      	beq.n	8000fc6 <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	f042 0201 	orr.w	r2, r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fcc:	2a06      	cmp	r2, #6
 8000fce:	d007      	beq.n	8000fe0 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000fd8:	2000      	movs	r0, #0
 8000fda:	4770      	bx	lr
    return HAL_ERROR;
 8000fdc:	2001      	movs	r0, #1
 8000fde:	4770      	bx	lr
  return HAL_OK;
 8000fe0:	2000      	movs	r0, #0
}
 8000fe2:	4770      	bx	lr
 8000fe4:	40012c00 	.word	0x40012c00

08000fe8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8000fe8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fea:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <TIM_Base_SetConfig+0x70>)
 8000fec:	4290      	cmp	r0, r2
 8000fee:	d00a      	beq.n	8001006 <TIM_Base_SetConfig+0x1e>
 8000ff0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ff4:	d007      	beq.n	8001006 <TIM_Base_SetConfig+0x1e>
 8000ff6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000ffa:	4290      	cmp	r0, r2
 8000ffc:	d003      	beq.n	8001006 <TIM_Base_SetConfig+0x1e>
 8000ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001002:	4290      	cmp	r0, r2
 8001004:	d103      	bne.n	800100e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800100a:	684a      	ldr	r2, [r1, #4]
 800100c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <TIM_Base_SetConfig+0x70>)
 8001010:	4290      	cmp	r0, r2
 8001012:	d00a      	beq.n	800102a <TIM_Base_SetConfig+0x42>
 8001014:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001018:	d007      	beq.n	800102a <TIM_Base_SetConfig+0x42>
 800101a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800101e:	4290      	cmp	r0, r2
 8001020:	d003      	beq.n	800102a <TIM_Base_SetConfig+0x42>
 8001022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001026:	4290      	cmp	r0, r2
 8001028:	d103      	bne.n	8001032 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800102a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800102e:	68ca      	ldr	r2, [r1, #12]
 8001030:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001036:	694a      	ldr	r2, [r1, #20]
 8001038:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800103a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800103c:	688b      	ldr	r3, [r1, #8]
 800103e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001040:	680b      	ldr	r3, [r1, #0]
 8001042:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <TIM_Base_SetConfig+0x70>)
 8001046:	4298      	cmp	r0, r3
 8001048:	d002      	beq.n	8001050 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800104a:	2301      	movs	r3, #1
 800104c:	6143      	str	r3, [r0, #20]
}
 800104e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001050:	690b      	ldr	r3, [r1, #16]
 8001052:	6303      	str	r3, [r0, #48]	; 0x30
 8001054:	e7f9      	b.n	800104a <TIM_Base_SetConfig+0x62>
 8001056:	bf00      	nop
 8001058:	40012c00 	.word	0x40012c00

0800105c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800105c:	b340      	cbz	r0, 80010b0 <HAL_TIM_Base_Init+0x54>
{
 800105e:	b510      	push	{r4, lr}
 8001060:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001062:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001066:	b1f3      	cbz	r3, 80010a6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001068:	2302      	movs	r3, #2
 800106a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800106e:	4621      	mov	r1, r4
 8001070:	f851 0b04 	ldr.w	r0, [r1], #4
 8001074:	f7ff ffb8 	bl	8000fe8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001078:	2301      	movs	r3, #1
 800107a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800107e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001082:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001086:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800108a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800108e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001096:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800109a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800109e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80010a2:	2000      	movs	r0, #0
}
 80010a4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80010a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80010aa:	f7ff f9b3 	bl	8000414 <HAL_TIM_Base_MspInit>
 80010ae:	e7db      	b.n	8001068 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80010b0:	2001      	movs	r0, #1
}
 80010b2:	4770      	bx	lr

080010b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80010b4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80010b6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80010b8:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80010bc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80010c0:	430a      	orrs	r2, r1
 80010c2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80010c6:	6082      	str	r2, [r0, #8]
}
 80010c8:	bc10      	pop	{r4}
 80010ca:	4770      	bx	lr

080010cc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80010cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d066      	beq.n	80011a2 <HAL_TIM_ConfigClockSource+0xd6>
{
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80010d8:	2301      	movs	r3, #1
 80010da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80010de:	2302      	movs	r3, #2
 80010e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80010e4:	6802      	ldr	r2, [r0, #0]
 80010e6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80010e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80010ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80010f0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80010f2:	680b      	ldr	r3, [r1, #0]
 80010f4:	2b60      	cmp	r3, #96	; 0x60
 80010f6:	d040      	beq.n	800117a <HAL_TIM_ConfigClockSource+0xae>
 80010f8:	d822      	bhi.n	8001140 <HAL_TIM_ConfigClockSource+0x74>
 80010fa:	2b40      	cmp	r3, #64	; 0x40
 80010fc:	d047      	beq.n	800118e <HAL_TIM_ConfigClockSource+0xc2>
 80010fe:	d90b      	bls.n	8001118 <HAL_TIM_ConfigClockSource+0x4c>
 8001100:	2b50      	cmp	r3, #80	; 0x50
 8001102:	d10e      	bne.n	8001122 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001104:	68ca      	ldr	r2, [r1, #12]
 8001106:	6849      	ldr	r1, [r1, #4]
 8001108:	6800      	ldr	r0, [r0, #0]
 800110a:	f7ff ff11 	bl	8000f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800110e:	2150      	movs	r1, #80	; 0x50
 8001110:	6820      	ldr	r0, [r4, #0]
 8001112:	f7ff ff32 	bl	8000f7a <TIM_ITRx_SetConfig>
      break;
 8001116:	e004      	b.n	8001122 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001118:	2b20      	cmp	r3, #32
 800111a:	d00c      	beq.n	8001136 <HAL_TIM_ConfigClockSource+0x6a>
 800111c:	d908      	bls.n	8001130 <HAL_TIM_ConfigClockSource+0x64>
 800111e:	2b30      	cmp	r3, #48	; 0x30
 8001120:	d009      	beq.n	8001136 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8001122:	2301      	movs	r3, #1
 8001124:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001128:	2000      	movs	r0, #0
 800112a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800112e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001130:	b10b      	cbz	r3, 8001136 <HAL_TIM_ConfigClockSource+0x6a>
 8001132:	2b10      	cmp	r3, #16
 8001134:	d1f5      	bne.n	8001122 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001136:	4619      	mov	r1, r3
 8001138:	6820      	ldr	r0, [r4, #0]
 800113a:	f7ff ff1e 	bl	8000f7a <TIM_ITRx_SetConfig>
        break;
 800113e:	e7f0      	b.n	8001122 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001140:	2b70      	cmp	r3, #112	; 0x70
 8001142:	d00e      	beq.n	8001162 <HAL_TIM_ConfigClockSource+0x96>
 8001144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001148:	d1eb      	bne.n	8001122 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800114a:	68cb      	ldr	r3, [r1, #12]
 800114c:	684a      	ldr	r2, [r1, #4]
 800114e:	6889      	ldr	r1, [r1, #8]
 8001150:	6800      	ldr	r0, [r0, #0]
 8001152:	f7ff ffaf 	bl	80010b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001156:	6822      	ldr	r2, [r4, #0]
 8001158:	6893      	ldr	r3, [r2, #8]
 800115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115e:	6093      	str	r3, [r2, #8]
      break;
 8001160:	e7df      	b.n	8001122 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001162:	68cb      	ldr	r3, [r1, #12]
 8001164:	684a      	ldr	r2, [r1, #4]
 8001166:	6889      	ldr	r1, [r1, #8]
 8001168:	6800      	ldr	r0, [r0, #0]
 800116a:	f7ff ffa3 	bl	80010b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800116e:	6822      	ldr	r2, [r4, #0]
 8001170:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001172:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001176:	6093      	str	r3, [r2, #8]
      break;
 8001178:	e7d3      	b.n	8001122 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800117a:	68ca      	ldr	r2, [r1, #12]
 800117c:	6849      	ldr	r1, [r1, #4]
 800117e:	6800      	ldr	r0, [r0, #0]
 8001180:	f7ff fee8 	bl	8000f54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001184:	2160      	movs	r1, #96	; 0x60
 8001186:	6820      	ldr	r0, [r4, #0]
 8001188:	f7ff fef7 	bl	8000f7a <TIM_ITRx_SetConfig>
      break;
 800118c:	e7c9      	b.n	8001122 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800118e:	68ca      	ldr	r2, [r1, #12]
 8001190:	6849      	ldr	r1, [r1, #4]
 8001192:	6800      	ldr	r0, [r0, #0]
 8001194:	f7ff fecc 	bl	8000f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	6820      	ldr	r0, [r4, #0]
 800119c:	f7ff feed 	bl	8000f7a <TIM_ITRx_SetConfig>
      break;
 80011a0:	e7bf      	b.n	8001122 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 80011a2:	2002      	movs	r0, #2
}
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80011a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d02c      	beq.n	800120a <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 80011b0:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80011b2:	2301      	movs	r3, #1
 80011b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80011be:	6803      	ldr	r3, [r0, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80011c2:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80011c4:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80011c8:	680a      	ldr	r2, [r1, #0]
 80011ca:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80011ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80011d0:	6803      	ldr	r3, [r0, #0]
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00a      	beq.n	80011ee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80011d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011dc:	d007      	beq.n	80011ee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80011de:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d003      	beq.n	80011ee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80011e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d104      	bne.n	80011f8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80011ee:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80011f2:	684a      	ldr	r2, [r1, #4]
 80011f4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80011f6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80011fe:	2300      	movs	r3, #0
 8001200:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001204:	4618      	mov	r0, r3
}
 8001206:	bc10      	pop	{r4}
 8001208:	4770      	bx	lr
  __HAL_LOCK(htim);
 800120a:	2002      	movs	r0, #2
}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40012c00 	.word	0x40012c00

08001214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001214:	b510      	push	{r4, lr}
 8001216:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001218:	6802      	ldr	r2, [r0, #0]
 800121a:	6913      	ldr	r3, [r2, #16]
 800121c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001220:	68c1      	ldr	r1, [r0, #12]
 8001222:	430b      	orrs	r3, r1
 8001224:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001226:	6883      	ldr	r3, [r0, #8]
 8001228:	6902      	ldr	r2, [r0, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	6942      	ldr	r2, [r0, #20]
 800122e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001230:	6801      	ldr	r1, [r0, #0]
 8001232:	68cb      	ldr	r3, [r1, #12]
 8001234:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001238:	f023 030c 	bic.w	r3, r3, #12
 800123c:	4313      	orrs	r3, r2
 800123e:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001240:	6802      	ldr	r2, [r0, #0]
 8001242:	6953      	ldr	r3, [r2, #20]
 8001244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001248:	6981      	ldr	r1, [r0, #24]
 800124a:	430b      	orrs	r3, r1
 800124c:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800124e:	6802      	ldr	r2, [r0, #0]
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <UART_SetConfig+0x8c>)
 8001252:	429a      	cmp	r2, r3
 8001254:	d020      	beq.n	8001298 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001256:	f7ff fe4b 	bl	8000ef0 <HAL_RCC_GetPCLK1Freq>
 800125a:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800125c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001260:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001264:	6863      	ldr	r3, [r4, #4]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fbb2 f2f3 	udiv	r2, r2, r3
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <UART_SetConfig+0x90>)
 800126e:	fba0 3102 	umull	r3, r1, r0, r2
 8001272:	0949      	lsrs	r1, r1, #5
 8001274:	2364      	movs	r3, #100	; 0x64
 8001276:	fb03 2311 	mls	r3, r3, r1, r2
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	3332      	adds	r3, #50	; 0x32
 800127e:	fba0 2303 	umull	r2, r3, r0, r3
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001288:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	6821      	ldr	r1, [r4, #0]
 8001292:	4413      	add	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8001296:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001298:	f7ff fe3a 	bl	8000f10 <HAL_RCC_GetPCLK2Freq>
 800129c:	4602      	mov	r2, r0
 800129e:	e7dd      	b.n	800125c <UART_SetConfig+0x48>
 80012a0:	40013800 	.word	0x40013800
 80012a4:	51eb851f 	.word	0x51eb851f

080012a8 <HAL_UART_Init>:
  if (huart == NULL)
 80012a8:	b358      	cbz	r0, 8001302 <HAL_UART_Init+0x5a>
{
 80012aa:	b510      	push	{r4, lr}
 80012ac:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80012ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80012b2:	b30b      	cbz	r3, 80012f8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80012b4:	2324      	movs	r3, #36	; 0x24
 80012b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80012ba:	6822      	ldr	r2, [r4, #0]
 80012bc:	68d3      	ldr	r3, [r2, #12]
 80012be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012c2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff ffa5 	bl	8001214 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012ca:	6822      	ldr	r2, [r4, #0]
 80012cc:	6913      	ldr	r3, [r2, #16]
 80012ce:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80012d2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012d4:	6822      	ldr	r2, [r4, #0]
 80012d6:	6953      	ldr	r3, [r2, #20]
 80012d8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80012dc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80012de:	6822      	ldr	r2, [r4, #0]
 80012e0:	68d3      	ldr	r3, [r2, #12]
 80012e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012e6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012e8:	2000      	movs	r0, #0
 80012ea:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80012ec:	2320      	movs	r3, #32
 80012ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80012f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80012f6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80012f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80012fc:	f7ff f8a0 	bl	8000440 <HAL_UART_MspInit>
 8001300:	e7d8      	b.n	80012b4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001302:	2001      	movs	r0, #1
}
 8001304:	4770      	bx	lr
	...

08001308 <__libc_init_array>:
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	2600      	movs	r6, #0
 800130c:	4d0c      	ldr	r5, [pc, #48]	; (8001340 <__libc_init_array+0x38>)
 800130e:	4c0d      	ldr	r4, [pc, #52]	; (8001344 <__libc_init_array+0x3c>)
 8001310:	1b64      	subs	r4, r4, r5
 8001312:	10a4      	asrs	r4, r4, #2
 8001314:	42a6      	cmp	r6, r4
 8001316:	d109      	bne.n	800132c <__libc_init_array+0x24>
 8001318:	f000 f822 	bl	8001360 <_init>
 800131c:	2600      	movs	r6, #0
 800131e:	4d0a      	ldr	r5, [pc, #40]	; (8001348 <__libc_init_array+0x40>)
 8001320:	4c0a      	ldr	r4, [pc, #40]	; (800134c <__libc_init_array+0x44>)
 8001322:	1b64      	subs	r4, r4, r5
 8001324:	10a4      	asrs	r4, r4, #2
 8001326:	42a6      	cmp	r6, r4
 8001328:	d105      	bne.n	8001336 <__libc_init_array+0x2e>
 800132a:	bd70      	pop	{r4, r5, r6, pc}
 800132c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001330:	4798      	blx	r3
 8001332:	3601      	adds	r6, #1
 8001334:	e7ee      	b.n	8001314 <__libc_init_array+0xc>
 8001336:	f855 3b04 	ldr.w	r3, [r5], #4
 800133a:	4798      	blx	r3
 800133c:	3601      	adds	r6, #1
 800133e:	e7f2      	b.n	8001326 <__libc_init_array+0x1e>
 8001340:	080013a4 	.word	0x080013a4
 8001344:	080013a4 	.word	0x080013a4
 8001348:	080013a4 	.word	0x080013a4
 800134c:	080013a8 	.word	0x080013a8

08001350 <memset>:
 8001350:	4603      	mov	r3, r0
 8001352:	4402      	add	r2, r0
 8001354:	4293      	cmp	r3, r2
 8001356:	d100      	bne.n	800135a <memset+0xa>
 8001358:	4770      	bx	lr
 800135a:	f803 1b01 	strb.w	r1, [r3], #1
 800135e:	e7f9      	b.n	8001354 <memset+0x4>

08001360 <_init>:
 8001360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001362:	bf00      	nop
 8001364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001366:	bc08      	pop	{r3}
 8001368:	469e      	mov	lr, r3
 800136a:	4770      	bx	lr

0800136c <_fini>:
 800136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800136e:	bf00      	nop
 8001370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001372:	bc08      	pop	{r3}
 8001374:	469e      	mov	lr, r3
 8001376:	4770      	bx	lr
